//! HTML output generation for cargo-wrt reports
//!
//! Provides professional HTML formatting for requirements matrices,
//! safety reports, and documentation compliance reports.

use std::collections::HashMap;

use anyhow::Result;
use serde::Serialize;

/// HTML formatter for cargo-wrt reports
pub struct HtmlFormatter {
    include_css: bool,
    theme:       HtmlTheme,
}

/// HTML theme configuration
#[derive(Debug, Clone)]
pub enum HtmlTheme {
    Light,
    Dark,
    Professional,
}

impl Default for HtmlFormatter {
    fn default() -> Self {
        Self {
            include_css: true,
            theme:       HtmlTheme::Professional,
        }
    }
}

impl HtmlFormatter {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn with_theme(mut self, theme: HtmlTheme) -> Self {
        self.theme = theme;
        self
    }

    pub fn with_embedded_css(mut self, include: bool) -> Self {
        self.include_css = include;
        self
    }

    /// Generate complete HTML document
    pub fn generate_document(&self, title: &str, content: &str) -> String {
        format!(
            r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{}</title>
    {}
</head>
<body>
    <div class="container">
        <header>
            <h1>{}</h1>
            <p class="subtitle">Generated by cargo-wrt on {}</p>
        </header>
        <main>
            {}
        </main>
        <footer>
            <p>Generated with <a href="https://github.com/pulseengine/wrt">cargo-wrt</a></p>
        </footer>
    </div>
    {}
</body>
</html>"#,
            title,
            if self.include_css { self.get_css() } else { String::new() },
            title,
            chrono::Utc::now().format("%Y-%m-%d %H:%M:%S UTC"),
            content,
            if self.include_css { self.get_javascript() } else { String::new() }
        )
    }

    /// Get CSS styles based on theme
    fn get_css(&self) -> String {
        let css = match self.theme {
            HtmlTheme::Light => include_str!("templates/styles/light.css"),
            HtmlTheme::Dark => include_str!("templates/styles/dark.css"),
            HtmlTheme::Professional => include_str!("templates/styles/professional.css"),
        };
        format!("<style>{}</style>", css)
    }

    /// Get JavaScript for interactive features
    fn get_javascript(&self) -> String {
        let js = include_str!("templates/scripts/interactive.js";
        format!("<script>{}</script>", js)
    }
}

/// HTML report generator for structured data
pub struct HtmlReportGenerator;

impl HtmlReportGenerator {
    /// Generate requirements traceability matrix HTML
    pub fn requirements_matrix(
        requirements: &[RequirementData],
        formatter: &HtmlFormatter,
    ) -> Result<String> {
        let mut content = String::new);

        content.push_str(r#"<div class="requirements-matrix">"#;
        content.push_str(r#"<h2>Requirements Traceability Matrix</h2>"#;

        // Summary statistics
        let total = requirements.len);
        let implemented = requirements.iter().filter(|r| !r.implementations.is_empty()).count);
        let tested = requirements.iter().filter(|r| !r.tests.is_empty()).count);
        let documented = requirements.iter().filter(|r| !r.documentation.is_empty()).count);

        content.push_str(&format!(
            r#"<div class="summary">
                <div class="stat">
                    <span class="number">{}</span>
                    <span class="label">Total Requirements</span>
                </div>
                <div class="stat">
                    <span class="number">{}</span>
                    <span class="label">Implemented</span>
                </div>
                <div class="stat">
                    <span class="number">{}</span>
                    <span class="label">Tested</span>
                </div>
                <div class="stat">
                    <span class="number">{}</span>
                    <span class="label">Documented</span>
                </div>
            </div>"#,
            total, implemented, tested, documented
        ;

        // Requirements table
        content.push_str(r#"<table class="requirements-table">"#;
        content.push_str(
            r#"<thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>ASIL</th>
                <th>Type</th>
                <th>Status</th>
                <th>Implementation</th>
                <th>Tests</th>
                <th>Documentation</th>
            </tr>
        </thead><tbody>"#,
        ;

        for req in requirements {
            let status_class = match req.status.as_str() {
                "Verified" => "status-verified",
                "Implemented" => "status-implemented",
                "Partial" => "status-partial",
                _ => "status-pending",
            };

            content.push_str(&format!(
                r#"<tr>
                    <td class="req-id">{}</td>
                    <td class="req-title">{}</td>
                    <td class="asil-level asil-{}">{}</td>
                    <td class="req-type">{}</td>
                    <td class="req-status {}"><span>{}</span></td>
                    <td class="implementations">{}</td>
                    <td class="tests">{}</td>
                    <td class="documentation">{}</td>
                </tr>"#,
                req.id,
                req.title,
                req.asil_level.to_lowercase(),
                req.asil_level,
                req.req_type,
                status_class,
                req.status,
                req.implementations.join(", "),
                req.tests.join(", "),
                req.documentation.join(", ")
            ;
        }

        content.push_str("</tbody></table>";
        content.push_str("</div>";

        Ok(formatter.generate_document("Requirements Traceability Matrix", &content))
    }

    /// Generate safety verification report HTML
    pub fn safety_report(report: &SafetyReportData, formatter: &HtmlFormatter) -> Result<String> {
        let mut content = String::new);

        content.push_str(r#"<div class="safety-report">"#;
        content.push_str(r#"<h2>Safety Verification Report</h2>"#;

        // Overall compliance
        let compliance_class = if report.overall_compliance >= 95.0 {
            "compliance-excellent"
        } else if report.overall_compliance >= 85.0 {
            "compliance-good"
        } else if report.overall_compliance >= 70.0 {
            "compliance-warning"
        } else {
            "compliance-critical"
        };

        content.push_str(&format!(
            r#"<div class="compliance-overview">
                <div class="compliance-score {}">
                    <span class="score">{:.1}%</span>
                    <span class="label">Overall Compliance</span>
                </div>
            </div>"#,
            compliance_class, report.overall_compliance
        ;

        // ASIL breakdown
        content.push_str(r#"<div class="asil-breakdown">"#;
        content.push_str(r#"<h3>ASIL Level Compliance</h3>"#;
        content.push_str(r#"<div class="asil-grid">"#;

        for (asil, compliance) in &report.asil_compliance {
            content.push_str(&format!(
                r#"<div class="asil-card asil-{}">
                    <div class="asil-level">{}</div>
                    <div class="asil-compliance">{:.1}%</div>
                </div>"#,
                asil.to_lowercase(),
                asil,
                compliance * 100.0
            ;
        }

        content.push_str("</div></div>";

        // Test summary
        content.push_str(&format!(
            r#"<div class="test-summary">
                <h3>Test Summary</h3>
                <div class="test-stats">
                    <div class="test-stat">
                        <span class="number">{}</span>
                        <span class="label">Total Tests</span>
                    </div>
                    <div class="test-stat">
                        <span class="number">{}</span>
                        <span class="label">Passed</span>
                    </div>
                    <div class="test-stat">
                        <span class="number">{}</span>
                        <span class="label">Failed</span>
                    </div>
                    <div class="test-stat">
                        <span class="number">{:.1}%</span>
                        <span class="label">Coverage</span>
                    </div>
                </div>
            </div>"#,
            report.test_summary.total_tests,
            report.test_summary.passed_tests,
            report.test_summary.failed_tests,
            report.test_summary.coverage_percentage
        ;

        // Recommendations
        if !report.recommendations.is_empty() {
            content.push_str(r#"<div class="recommendations">"#;
            content.push_str(r#"<h3>Recommendations</h3>"#;
            content.push_str(r#"<ul>"#;

            for rec in &report.recommendations {
                content.push_str(&format!(r#"<li>{}</li>"#, rec;
            }

            content.push_str("</ul></div>";
        }

        content.push_str("</div>";

        Ok(formatter.generate_document("Safety Verification Report", &content))
    }

    /// Generate documentation compliance report HTML
    pub fn documentation_report(
        report: &DocumentationReportData,
        formatter: &HtmlFormatter,
    ) -> Result<String> {
        let mut content = String::new);

        content.push_str(r#"<div class="documentation-report">"#;
        content.push_str(r#"<h2>Documentation Compliance Report</h2>"#;

        // Compliance overview
        content.push_str(&format!(
            r#"<div class="doc-overview">
                <div class="doc-stat">
                    <span class="number">{:.1}%</span>
                    <span class="label">Overall Compliance</span>
                </div>
                <div class="doc-stat">
                    <span class="number">{}</span>
                    <span class="label">Total Requirements</span>
                </div>
                <div class="doc-stat">
                    <span class="number">{}</span>
                    <span class="label">Total Violations</span>
                </div>
                <div class="doc-stat">
                    <span class="number">{}</span>
                    <span class="label">Critical Violations</span>
                </div>
            </div>"#,
            report.overall_compliance,
            report.total_requirements,
            report.total_violations,
            report.critical_violations
        ;

        // ASIL compliance breakdown
        content.push_str(r#"<div class="asil-doc-compliance">"#;
        content.push_str(r#"<h3>Documentation Compliance by ASIL Level</h3>"#;
        content.push_str(r#"<div class="asil-doc-grid">"#;

        for (asil, compliance) in &report.asil_compliance {
            content.push_str(&format!(
                r#"<div class="asil-doc-card">
                    <div class="asil-level">{}</div>
                    <div class="compliance">{:.1}%</div>
                </div>"#,
                asil, compliance
            ;
        }

        content.push_str("</div></div>";

        content.push_str("</div>";

        Ok(formatter.generate_document("Documentation Compliance Report", &content))
    }
}

/// Data structures for HTML generation
#[derive(Debug, Serialize)]
pub struct RequirementData {
    pub id:              String,
    pub title:           String,
    pub asil_level:      String,
    pub req_type:        String,
    pub status:          String,
    pub implementations: Vec<String>,
    pub tests:           Vec<String>,
    pub documentation:   Vec<String>,
}

#[derive(Debug, Serialize)]
pub struct SafetyReportData {
    pub overall_compliance: f64,
    pub asil_compliance:    HashMap<String, f64>,
    pub test_summary:       TestSummaryData,
    pub recommendations:    Vec<String>,
}

#[derive(Debug, Serialize)]
pub struct TestSummaryData {
    pub total_tests:         usize,
    pub passed_tests:        usize,
    pub failed_tests:        usize,
    pub coverage_percentage: f64,
}

#[derive(Debug, Serialize)]
pub struct DocumentationReportData {
    pub overall_compliance:  f64,
    pub total_requirements:  usize,
    pub total_violations:    usize,
    pub critical_violations: usize,
    pub asil_compliance:     HashMap<String, f64>,
}
