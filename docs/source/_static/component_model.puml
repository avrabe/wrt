@startuml

package "Component Model" {
  package "Core" {
    [Component] as Component
    [Instance] as Instance
    [Namespace] as Namespace
    [Export] as Export
    [Import] as Import
    [Runtime] as Runtime
    [Canonical ABI] as CanonicalABI
    
    Component --> Instance : instantiates
    Component --> Export : manages
    Component --> Import : manages
    Instance --> Namespace : contains
    Component --> Runtime : uses
    Component --> CanonicalABI : uses
  }
  
  package "Interface Types" {
    [Type Compatibility] as TypeCompat
    [Value Types] as ValueTypes
    [Type Conversion] as TypeConv
    [Strategies] as Strategies
    [Builtins] as Builtins
    
    TypeCompat --> ValueTypes
    TypeConv --> ValueTypes
    ValueTypes --> CanonicalABI
    TypeConv --> Strategies : uses
    Strategies --> Builtins : utilizes
  }
  
  package "Resource Management" {
    [Resources] as Resources
    [Resource Manager] as ResourceManager
    [Resource Strategy] as ResStrategy
    [Memory Strategy] as MemStrategy
    [Memory Manager] as MemManager
    [Buffer Pool] as BufferPool
    [Resource Operations] as ResOps
    
    Resources --> ResourceManager : uses
    ResourceManager --> ResStrategy : implements
    ResStrategy <|-- MemStrategy : extends
    MemStrategy --> MemManager : utilizes
    MemStrategy --> BufferPool : manages
    Resources --> ResOps : defines
  }
  
  package "Host Integration" {
    [Host] as Host
    [Execution] as ExecCtx
    
    Host --> Runtime : provides
    Host --> Import : supplies
    Export --> Host : exposes to
    ExecCtx --> Instance : manages
  }
  
  package "Verification" {
    [Module Validation] as ModuleValid
    [Type Verification] as TypeVerify
    [Resource Verification] as ResVerify
    [Structural Validation] as StructValid
    
    Component --> ModuleValid : undergoes
    ValueTypes --> TypeVerify : checked by
    Resources --> ResVerify : verified by
    Instance --> StructValid : ensures
  }
}

@enduml 