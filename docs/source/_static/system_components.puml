@startuml System Components

package "WRT System" {
  [WRTD CLI] as CLI

  package "WRT Core Libraries" {
    package "Core Runtime" {
      [Stackless Engine] as StacklessEngine
      [Module] as Module 
      [Memory] as Memory
      [Stack] as Stack
      [Instructions] as Instructions
      [Validation] as Validation
      [Execution] as Execution
      [Resource Tracking] as ResTrack
      [Error Handling] as ErrorHandling
      
      StacklessEngine --> Module
      StacklessEngine --> Memory
      StacklessEngine --> Stack
      StacklessEngine --> Execution
      StacklessEngine --> ResTrack

      Execution --> Instructions
      Module --> Validation
      Execution --> ErrorHandling
    }
    
    package "Component Model" {
      [Component] as Component
      [Instance] as Instance
      [Interface Types] as InterfaceTypes
      [Value Types] as ValueTypes
      [Canonical ABI] as CanonicalABI
      [Resource Types] as ResourceTypes
      [Resource Manager] as ResourceManager
      
      Component --> Instance
      Component --> InterfaceTypes
      Component --> ResourceTypes
      InterfaceTypes --> ValueTypes
      ValueTypes --> CanonicalABI
      ResourceTypes --> ResourceManager
    }
    
    package "Safety Layer" {
      [Memory Safety] as MemSafety
      [Resource Limits] as ResLimits
      [Verification] as Verify
      [Error Recovery] as Recovery
      [Thread Safety] as ThreadSafety
      [Safe Memory] as SafeMemory
      
      MemSafety --> Memory
      ResLimits --> ResTrack
      Verify --> Module
      Recovery --> ErrorHandling
      ThreadSafety --> Memory
      SafeMemory --> MemSafety
    }
    
    package "Intercept System" {
      [Link Interceptor] as Interceptor
      [Intercept Strategies] as Strategies
      [Firewall] as Firewall
      [Logging Strategy] as LogStrategy
      
      Interceptor --> Strategies
      Strategies <|-- Firewall
      Strategies <|-- LogStrategy
      Component --> Interceptor : uses
    }
    
    package "WASI Implementation" {
      [Logging] as Logging
      [I/O] as IO
      [Filesystem] as Filesystem
      [Clocks] as Clocks
      [Platform Backends] as Backends
      
      Logging --> Backends
      IO --> Backends
      Filesystem --> Backends
      Clocks --> Backends
    }
  }
  
  package "Testing Tools" {
    [WAST Runner] as WASTRunner
    [Safety Tests] as SafetyTests
    [Fuzzing] as Fuzzing
    [Component Tests] as ComponentTests
    [Intercept Tests] as InterceptTests
    
    WASTRunner --> StacklessEngine
    SafetyTests --> MemSafety
    Fuzzing --> Component
    ComponentTests --> ResourceManager
    InterceptTests --> Interceptor
  }
  
  CLI --> StacklessEngine
  CLI --> Component
  CLI --> Logging
}

@enduml