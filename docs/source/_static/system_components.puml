@startuml

package "WRT System" {
  [WRTD CLI] as CLI

  package "WRT Core Library" {
    package "Core Runtime" {
      /' Traditional Engine using host stack '/
      [Traditional Engine] as TradEngine
      /' Stackless Engine using state machine '/
      [Stackless Engine] as StacklessEngine
      
      [Module] as Module 
      [Memory] as Memory
      [Stack] as Stack /' Used by Traditional Engine '/
      [Instructions] as Instructions
      [Validation] as Validation
      [Execution] as Execution /' Logic shared or specific to engines '/
      
      TradEngine --> Module
      TradEngine --> Memory
      TradEngine --> Stack
      TradEngine --> Execution
      
      StacklessEngine --> Module
      StacklessEngine --> Memory
      /' StacklessEngine manages state internally '/
      StacklessEngine --> Execution

      Execution --> Instructions
      Module --> Validation
    }
    
    package "Component Model" {
      [Component] as Component
      [Interface Types] as InterfaceTypes
      [Resource Types] as ResourceTypes
      
      Component --> InterfaceTypes
      Component --> ResourceTypes
    }
    
    package "WASI Implementation" {
      [Logging] as Logging
      [Platform Backends] as Backends #LightGray /' Planned '/
      
      Logging --> Backends <<..>> /' Planned '/ : platform-specific output
    }
  }
  
  CLI --> StacklessEngine : Primarily uses
  CLI --> Component
  CLI --> Logging
}

@enduml