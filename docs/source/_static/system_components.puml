@startuml

package "WRT System" {
  [WRTD CLI] as CLI

  package "WRT Core Library" {
    package "Core Runtime" {
      /' Traditional Engine using host stack '/
      [Traditional Engine] as TradEngine
      /' Stackless Engine using state machine '/
      [Stackless Engine] as StacklessEngine
      
      [Module] as Module 
      [Memory] as Memory
      [Stack] as Stack
      [Instructions] as Instructions
      [Validation] as Validation
      [Execution] as Execution
      [Resource Tracking] as ResTrack
      [Error Handling] as ErrorHandling
      
      TradEngine --> Module
      TradEngine --> Memory
      TradEngine --> Stack
      TradEngine --> Execution
      
      StacklessEngine --> Module
      StacklessEngine --> Memory
      StacklessEngine --> Execution
      StacklessEngine --> ResTrack

      Execution --> Instructions
      Module --> Validation
      Execution --> ErrorHandling
    }
    
    package "Component Model" {
      [Component] as Component
      [Interface Types] as InterfaceTypes
      [Resource Types] as ResourceTypes
      [Resource Manager] as ResourceManager
      
      Component --> InterfaceTypes
      Component --> ResourceTypes
      ResourceTypes --> ResourceManager
    }
    
    package "Safety Layer" {
      [Memory Safety] as MemSafety
      [Resource Limits] as ResLimits
      [Verification] as Verify
      [Error Recovery] as Recovery
      
      MemSafety --> Memory
      ResLimits --> ResTrack
      Verify --> Module
      Recovery --> ErrorHandling
    }
    
    package "WASI Implementation" {
      [Logging] as Logging
      [Platform Backends] as Backends
      
      Logging --> Backends : platform-specific output
    }
  }
  
  package "Testing Tools" {
    [WAST Runner] as WASTRunner
    [Safety Tests] as SafetyTests
    [Fuzzing] as Fuzzing
    
    WASTRunner --> TradEngine
    SafetyTests --> MemSafety
    Fuzzing --> Component
  }
  
  CLI --> StacklessEngine : Primarily uses
  CLI --> Component
  CLI --> Logging
}

@enduml