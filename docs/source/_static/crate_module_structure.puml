@startuml crate_module_structure
!theme plain
skinparam packageStyle rectangle
skinparam stereotypeCBackgroundColor #E6F3FF
skinparam stereotypeIBackgroundColor #FFEAA7
skinparam stereotypeABackgroundColor #DFE6E9

title Pulseengine Crate & Module Structure

package "Foundation Layer" <<Crate>> #E6F3FF {
    package "wrt-foundation" {
        class SafeMemory <<module>> {
            + MemoryProvider trait
            + MemoryValidator
            + BoundsChecker
            --
            verify_access()
            validate_operation()
        }
        
        class BoundedCollections <<module>> {
            + BoundedVec<T, N>
            + BoundedString<N>
            + BoundedStack<T, N>
            --
            push() -> Result
            pop() -> Option<T>
        }
        
        class ComponentValue <<module>> {
            + Value enum
            + Type enum
            + Conversion traits
            --
            lower() -> WasmValue
            lift() -> ComponentValue
        }
    }
    
    package "wrt-error" {
        class ErrorTypes <<module>> {
            + WrtError enum
            + ErrorKind enum
            + ErrorContext
            --
            with_context()
            chain_error()
        }
    }
    
    package "wrt-sync" {
        class Synchronization <<module>> {
            + Mutex<T>
            + RwLock<T>
            + Once
            --
            platform_specific_impl()
        }
    }
}

package "Execution Layer" <<Crate>> #FFEAA7 {
    package "wrt-runtime" {
        class ModuleInstance <<module>> {
            + memories: Vec<Memory>
            + tables: Vec<Table>
            + globals: Vec<Global>
            --
            instantiate()
            invoke_export()
        }
        
        class StacklessEngine <<module>> {
            + ExecutionState
            + Frame
            + Stack
            --
            execute_instruction()
            yield_execution()
            resume_execution()
        }
        
        class MemoryAdapter <<module>> {
            + LinearMemory trait
            + SharedMemory
            + ProtectedMemory
            --
            grow()
            read/write operations
        }
    }
    
    package "wrt-instructions" {
        class Instructions <<module>> {
            + Instruction enum
            + ExecutionContext
            --
            execute()
            validate()
        }
        
        class ArithmeticOps <<module>> {
            i32_add(), i64_mul()
            f32_div(), f64_sqrt()
        }
        
        class MemoryOps <<module>> {
            i32_load(), i64_store()
            memory_grow(), memory_size()
        }
    }
}

package "Component Model" <<Crate>> #DFE6E9 {
    package "wrt-component" {
        class ComponentInstance <<module>> {
            + imports: ImportMap
            + exports: ExportMap
            + resources: ResourceTable
            --
            instantiate()
            call_export()
        }
        
        class CanonicalABI <<module>> {
            + lower_value()
            + lift_value()
            + resource_new()
            + resource_drop()
        }
        
        class ResourceManager <<module>> {
            + ResourceTable
            + ResourceHandle
            + ResourceStrategy
            --
            allocate()
            deallocate()
            validate_handle()
        }
    }
}

package "Platform Layer" <<Crate>> #B2BEC3 {
    package "wrt-platform" {
        interface PlatformMemory <<interface>> {
            + allocate()
            + deallocate()
            + protect()
        }
        
        class LinuxMemory <<platform>> {
            mmap(), mprotect()
            MTE support
        }
        
        class QNXMemory <<platform>> {
            shm_open()
            memory partitions
        }
        
        class ZephyrMemory <<platform>> {
            k_mem_slab
            static pools
        }
    }
}

' Relationships
SafeMemory ..> ErrorTypes : "Reports errors"
BoundedCollections ..> SafeMemory : "Uses"
ModuleInstance --> MemoryAdapter : "Manages"
StacklessEngine --> Instructions : "Executes"
Instructions --> ArithmeticOps : "Delegates"
Instructions --> MemoryOps : "Delegates"
MemoryOps --> SafeMemory : "Validates with"
ComponentInstance --> CanonicalABI : "Uses"
ComponentInstance --> ResourceManager : "Manages resources"
CanonicalABI --> ComponentValue : "Converts"
ResourceManager --> BoundedCollections : "Stores in"
MemoryAdapter ..> PlatformMemory : "Implements via"
LinuxMemory ..|> PlatformMemory
QNXMemory ..|> PlatformMemory
ZephyrMemory ..|> PlatformMemory
ModuleInstance --> Synchronization : "Thread safety"

@enduml