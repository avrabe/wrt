@startuml

package "Testing Infrastructure" {
  package "WAST Test Runner" {
    [WAST Parser] as WASTParser
    [Test Executor] as TestExec
    [Assertion Checker] as Assert
    [Test Reporter] as TestReport
    [Test Blacklist] as Blacklist
    
    WASTParser --> TestExec
    TestExec --> Assert
    Assert --> TestReport
    Blacklist --> TestExec
  }
  
  package "Safety Testing" {
    [Memory Safety Tests] as MemTest
    [Resource Limit Tests] as ResTest
    [Bounds Tests] as BoundsTest
    [Validation Tests] as ValidTest
    [Error Handling Tests] as ErrorTest
    
    MemTest --> BoundsTest
    ResTest --> BoundsTest
    ValidTest --> ErrorTest
  }
  
  package "Fuzzing" {
    [Binary Fuzzer] as BinFuzz
    [Instruction Fuzzer] as InstFuzz
    [Memory Fuzzer] as MemFuzz
    [Resource Fuzzer] as ResFuzz
    [Component Fuzzer] as CompFuzz
    
    BinFuzz --> InstFuzz
    InstFuzz --> MemFuzz
    MemFuzz --> ResFuzz
    ResFuzz --> CompFuzz
  }
  
  package "Component Model Testing" {
    [Interface Testing] as InterfaceTest
    [Value Types Tests] as ValueTest
    [Resource Tests] as ResourceTest
    [Canonical ABI Tests] as ABITest
    [Import/Export Tests] as IETest
    
    InterfaceTest --> ValueTest
    ValueTest --> ResourceTest
    ResourceTest --> ABITest
    ABITest --> IETest
  }
  
  package "Quality Assurance" {
    [Code Coverage] as Coverage
    [Benchmark Suite] as Bench
    [CI Pipeline] as CI
    [Performance Tests] as PerfTest
    [Regression Tests] as RegTest
    
    Coverage --> CI
    Bench --> PerfTest
    PerfTest --> RegTest
    RegTest --> CI
  }
  
  package "Verification Tools" {
    [Memory Verifier] as MemVerify
    [Type Checker] as TypeCheck
    [Stack Validation] as StackValid
    [Engine State Verifier] as EngineVerify
    [Resource Tracking Verifier] as ResVerify
    
    MemVerify --> TypeCheck
    TypeCheck --> StackValid
    StackValid --> EngineVerify
    EngineVerify --> ResVerify
  }
}

@enduml 