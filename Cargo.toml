[workspace]
members = [
    # "wrt-safety",    # TODO: Create wrt-safety crate
    "wrt",
    "wrtd",
    "xtask",
    "example",
    "wrt-sync",
    "wrt-error",
    "wrt-format",
    "wrt-foundation",
    "wrt-decoder",
    "wrt-debug",
    "wrt-component",
    "wrt-math",
    "wrt-host",
    "wrt-helper",
    "wrt-logging",
    "wrt-runtime",
    "wrt-instructions",
    "wrt-intercept",
    # "test-control-instructions",  # TODO: Remove after migration
    "wrt-verification-tool",
    "wrt-test-registry",
    "wrt-platform",
    "wrt-panic",
    "wrt-tests/integration"]
resolver = "2"  # Use edition 2021 resolver

[workspace.package]
authors = ["The WRT Project Developers"]
edition = "2021"
license = "MIT"
repository = "https://github.com/pulseengine/wrt" # Updated repository URL
version = "0.2.0" # Updated to 0.2.0 for consistency

[workspace.dependencies]
anyhow = "1.0"
wit-bindgen = "0.41.0"
dagger-sdk = { version = "0.18.9", features = ["codegen"] }

# Internal crate versions
# wrt-safety = { path = "wrt-safety", version = "0.2.0", default-features = false }
wrt = { path = "wrt", version = "0.2.0", default-features = false }
wrt-error = { path = "wrt-error", version = "0.2.0", default-features = false }
wrt-error-ng = { path = "wrt-error-ng", version = "0.2.0", default-features = false }
wrt-sync = { path = "wrt-sync", version = "0.2.0", default-features = false }
wrt-format = { path = "wrt-format", version = "0.2.0", default-features = false }
wrt-foundation = { path = "wrt-foundation", version = "0.2.0", default-features = false }
wrt-decoder = { path = "wrt-decoder", version = "0.2.0", default-features = false, features = ["std"] }
wrt-debug = { path = "wrt-debug", version = "0.2.0", default-features = false }
wrt-runtime = { path = "wrt-runtime", version = "0.2.0", default-features = false }
wrt-logging = { path = "wrt-logging", version = "0.2.0", default-features = false }
wrt-instructions = { path = "wrt-instructions", version = "0.2.0", default-features = false }
wrt-component = { path = "wrt-component", version = "0.2.0", default-features = false }
wrt-host = { path = "wrt-host", version = "0.2.0", default-features = false }
wrt-helper = { path = "wrt-helper", version = "0.2.0", default-features = false }
wrt-intercept = { path = "wrt-intercept", version = "0.2.0", default-features = false }
wrt-test-registry = { path = "wrt-test-registry", version = "0.2.0", default-features = false }
wrt-math = { path = "wrt-math", version = "0.2.0", default-features = false }
wrt-platform = { path = "wrt-platform", version = "0.2.0", default-features = false }
wrt-panic = { path = "wrt-panic", version = "0.2.0", default-features = false }
wrt-verification-tool = { path = "wrt-verification-tool", version = "0.2.0", default-features = false }

[workspace.lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)'] }
unused_imports = "allow"
unused_variables = "allow"
unused_mut = "allow"
unused_macros = "allow"
missing_docs = "allow"

# Workspace-level profiles inherit by members unless overridden.
# Setting panic=abort for production profiles (dev/release) for safety and deterministic behavior.
# Test and bench profiles intentionally use default panic handling for proper test framework operation.
[profile.dev]
panic = "abort"
# Inherits other settings from Cargo's defaults

[profile.release]
panic = "abort"
strip = true  # Reduce binary size
lto = true    # Link-Time Optimization
codegen-units = 1 # Maximize optimization opportunities

# Note: panic setting is intentionally omitted for test and bench profiles
# Tests and benchmarks need panic handling for proper error reporting and measurement
[profile.test]
# Inherits other settings from Cargo's defaults (e.g., debug assertions enabled)
# panic setting is not specified - let Rust handle this appropriately for tests

[profile.bench]
# Inherits from release profile by default
# panic setting is not specified - let Rust handle this appropriately for benchmarks

# Workspace-level Kani verification configuration
[workspace.metadata.kani]
# Global Kani settings for safety-critical verification
default-unwind = 5
stubbing-enabled = true
concrete-playbook = "off"
output-format = "terse"

# Memory safety verification suite
[[workspace.metadata.kani.package]]
name = "wrt-foundation"
verification-enabled = true
harnesses = [
    "verify_bounded_collections_memory_safety",
    "verify_safe_memory_bounds", 
    "verify_atomic_memory_operations"
]

# Concurrency safety verification suite  
[[workspace.metadata.kani.package]]
name = "wrt-sync"
verification-enabled = true
harnesses = [
    "verify_mutex_no_data_races",
    "verify_rwlock_concurrent_access",
    "verify_atomic_operations_safety"
]

# Type safety verification suite
[[workspace.metadata.kani.package]]
name = "wrt-component"
verification-enabled = true
harnesses = [
    "verify_component_type_safety",
    "verify_namespace_operations",
    "verify_import_export_consistency"
]

# Error handling verification
[[workspace.metadata.kani.package]]
name = "wrt-error"
verification-enabled = true
harnesses = [
    "verify_error_creation_safety",
    "verify_error_propagation"
]
