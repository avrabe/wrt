name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering
    inputs:
      run_extended_analysis: # Input to specifically trigger Kani/Miri
        description: 'Run Kani and Miri extended static analysis?'
        required: false
        default: false # Boolean false, not string
        type: boolean

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read
  checks: write

env:
  CARGO_TERM_COLOR: always
  # RUST_LOG: "info,xtask=debug,dagger_sdk=debug" # Optional: for more detailed Dagger logs

jobs:
  ci_checks_and_docs:
    name: CI Checks & Docs
    runs-on: ubuntu-latest
    # This job runs on push, PR, and all manual triggers (regardless of input)
    steps:
      - uses: actions/checkout@v4
      - name: Cargo Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Dagger Engine Cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/dagger
          key: ${{ runner.os }}-dagger-engine
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable # Or match your rust-toolchain.toml for building xtask
          override: true
      - name: Install xtask dependencies (if any, e.g. for xtask itself)
        run: cargo build --package xtask # Ensures xtask and its direct deps are built/cached
      - name: Run CI Integrity Checks (lint, fmt, deny, spell, headers, etc.)
        run: cargo xtask ci-integrity-checks
      - name: Setup Java for PlantUML (if CheckDocsStrict Dagger pipeline needs it from host - unlikely)
        uses: actions/setup-java@v4
        if: false # Assuming Dagger pipeline for docs is self-contained
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Install Python & PlantUML (if CheckDocsStrict Dagger pipeline needs them - unlikely)
        if: false # Assuming Dagger pipeline for docs is self-contained
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip plantuml
          pip3 install -r docs/source/requirements.txt
      - name: Run Strict Documentation Check (Daggerized)
        run: cargo xtask check-docs-strict
      - name: Initialize Requirements File (if missing)
        run: cargo xtask init-requirements
      - name: Run Requirements Verification
        run: cargo xtask verify-requirements
      - name: Generate Safety Summary for Documentation
        run: cargo xtask generate-safety-summary

  core_tests_and_analysis:
    name: Core Tests, Analysis & Coverage
    runs-on: ubuntu-latest
    # This job runs on push, PR, and all manual triggers (regardless of input)
    steps:
      - uses: actions/checkout@v4
      - name: Cargo Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Dagger Engine Cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/dagger
          key: ${{ runner.os }}-dagger-engine
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable # For xtask. Nightly for UDeps should be handled IN Dagger.
          override: true
          components: llvm-tools-preview # For coverage
      - name: Install xtask dependencies
        run: cargo build --package xtask
      - name: Run Tests (Daggerized)
        run: cargo xtask run-tests
      - name: Check Unused Dependencies (Daggerized, uses Nightly internally)
        run: cargo xtask UDeps
      - name: Run Security Audit (Daggerized)
        run: cargo xtask SecurityAudit
      - name: Run Coverage Tests (Daggerized)
        run: cargo xtask Coverage # This xtask should produce lcov.info and junit.xml
      - name: Run Basic Safety Checks
        run: |
          cargo test -p wrt-foundation asil_testing -- --nocapture || true
          cargo xtask check-requirements || cargo xtask init-requirements
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: |
            ./target/coverage/lcov.info
            ./target/coverage/cobertura.xml
          fail_ci_if_error: true
      - name: Upload test results to Codecov (JUnit)
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./target/coverage/junit.xml # Ensure this path is correct

  safety_verification:
    name: SCORE-Inspired Safety Verification
    runs-on: ubuntu-latest
    # Run safety verification on all pushes and PRs
    steps:
      - uses: actions/checkout@v4
      - name: Cargo Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-safety-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install xtask dependencies
        run: cargo build --package xtask
      - name: Check Requirements File
        run: cargo xtask check-requirements
        continue-on-error: true
      - name: Initialize Requirements if Missing
        run: cargo xtask init-requirements
        if: failure() # Only run if check-requirements failed
      - name: Run ASIL Test Suite
        run: cargo test -p wrt-foundation asil_testing -- --nocapture
        continue-on-error: true
      - name: Generate Comprehensive Safety Report (JSON)
        run: cargo xtask safety-report --format json --output safety-verification-full.json
      - name: Generate Comprehensive Safety Report (HTML)
        run: cargo xtask safety-report --format html --output safety-verification-report.html
      - name: Generate Safety Dashboard
        run: cargo xtask safety-dashboard
      - name: Upload Safety Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: safety-verification-artifacts
          path: |
            safety-verification-full.json
            safety-verification-report.html
            docs/source/_generated_safety_summary.rst
          retention-days: 90
      - name: Safety Verification Gate
        run: cargo xtask ci-safety --threshold 70.0 --fail-on-safety-issues --json-output

  extended_static_analysis:
    name: Extended Static Analysis (Miri, Kani)
    runs-on: ubuntu-latest
    # Only run this job if the workflow was manually dispatched AND the input was true
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_extended_analysis == true # Compare to boolean true
    needs: [ci_checks_and_docs, core_tests_and_analysis, safety_verification] # Optional: wait for other jobs
    steps:
      - uses: actions/checkout@v4
      - name: Cargo Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-extended-${{ hashFiles('**/Cargo.lock') }}
      - name: Dagger Engine Cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/dagger
          key: ${{ runner.os }}-dagger-engine-extended
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # Kani/Miri might need nightly or specific stable. Adjust as needed.
          # The Daggerized xtask should ideally manage this internally.
          toolchain: stable # Or nightly if Kani/Miri need it directly for xtask compilation
          override: true
          # Add components if they can be installed via rustup and xtask doesn't handle it
          # components: miri, kani # (kani might need manual install steps)
      - name: Install xtask dependencies
        run: cargo build --package xtask
      # Ensure you have `RunMiriChecks` and `RunKaniChecks` Daggerized xtask commands
      - name: Run Miri Checks (Daggerized)
        run: cargo xtask RunMiriChecks
      - name: Run Kani Checks (Daggerized)
        # Kani setup can be complex, ensure Dagger pipeline handles it.
        # May require installing Kani Verifier if not a rustup component.
        run: cargo xtask RunKaniChecks

# Coverage job is still Linux-only as tarpaulin only supports Linux
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: Check if just is available
        id: check-just
        run: |
          if command -v just &> /dev/null; then
            echo "JUST_INSTALLED=true" >> $GITHUB_ENV
            echo "Just is already installed"
          else
            echo "JUST_INSTALLED=false" >> $GITHUB_ENV
            echo "Just needs to be installed"
          fi
      - name: Install just
        if: env.JUST_INSTALLED != 'true'
        run: cargo install just --locked
      - name: Setup Rust targets
        run: just setup-rust-targets
      - name: Run coverage tests
        run: just coverage
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: target/coverage/lcov.info
          fail_ci_if_error: false

  audit:
    name: Security Audit (${{ matrix.os }})
    strategy:
      fail-fast: false  # Don't stop all jobs if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            continue-on-error: true  # Allow Windows to fail without stopping the workflow
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.continue-on-error || false }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 