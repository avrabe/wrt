# Workflow for deploying Sphinx documentation to GitHub Pages
name: Deploy Documentation to Pages

on:
  # Runs on pushes targeting the default branch or tags
  push:
    branches: ["main"]
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build and deploy (leave empty for automatic detection)'
        required: false
        default: ''

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # We need history to get tags
          fetch-depth: 0
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
                                   
      - name: Setup Rust and build API docs
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Check if just is available
        id: check-just
        run: |
            if command -v just &> /dev/null; then
              echo "JUST_INSTALLED=true" >> $GITHUB_ENV
              echo "Just is already installed"
            else
              echo "JUST_INSTALLED=false" >> $GITHUB_ENV
              echo "Just needs to be installed"
            fi
            
      - name: Install just
        if: env.JUST_INSTALLED != 'true'
        run: cargo install just --locked

      - name: Install python dependencies
        if: env.JUST_INSTALLED != 'true'
        run: just setup-python-deps

      - name: Determine version
        id: determine-version
        run: |
          # Initialize version variable
          VERSION=""
          
          # Check if version was provided as input
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manually specified version: $VERSION"
          # Check if this is a tag push
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
            echo "Using tag version: $VERSION"
          # Default to 'main' for branch pushes
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            VERSION="main"
            echo "Using branch version: $VERSION"
          else
            VERSION="main"
            echo "Using default version: $VERSION"
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Sphinx documentation for version
        run: |
          # Set version for documentation build
          export DOCS_VERSION="${{ env.VERSION }}"
          export DOCS_VERSION_PATH_PREFIX="/"
          
          # Build documentation (continue on error)
          just docs-with-diagrams || {
            echo "::warning::Documentation build encountered errors but will try to continue with versioning"
            # Ensure build directory exists even if build failed
            mkdir -p docs/_build/html
          }
          
          # Create directory structure for versioned docs
          mkdir -p docs/_build/versioned/${{ env.VERSION }}
          
          # Copy built HTML to versioned directory if it exists
          if [ -d "docs/_build/html" ]; then
            cp -r docs/_build/html/* docs/_build/versioned/${{ env.VERSION }}/ || {
              echo "::warning::Failed to copy HTML documentation to versioned directory"
              mkdir -p docs/_build/versioned/${{ env.VERSION }}
              echo "<html><body><h1>Documentation Generation Failed</h1><p>The documentation for version ${{ env.VERSION }} could not be generated properly.</p></body></html>" > docs/_build/versioned/${{ env.VERSION }}/index.html
            }
          else
            echo "::warning::HTML documentation directory not found"
            mkdir -p docs/_build/versioned/${{ env.VERSION }}
            echo "<html><body><h1>Documentation Generation Failed</h1><p>The documentation for version ${{ env.VERSION }} could not be generated properly.</p></body></html>" > docs/_build/versioned/${{ env.VERSION }}/index.html
          fi
          
          # Generate index file for root
          cp docs/source/root_index.html docs/_build/versioned/index.html || {
            echo "::warning::Failed to copy root index file"
            echo "<html><body><h1>WRT Documentation</h1><p>Please select a version: <a href='./main/'>main</a></p></body></html>" > docs/_build/versioned/index.html
          }
          
          # Generate the switcher.json file specifically for GitHub Pages
          python docs/source/_static/js/generate_switcher.py
          
          echo "Documentation processing completed for version ${{ env.VERSION }}"

      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs/_build/versioned'
          
  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
