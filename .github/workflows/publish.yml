# Workflow for deploying Sphinx documentation to GitHub Pages
name: Deploy Documentation to Pages

on:
  # Runs on pushes targeting the default branch or tags
  push:
    branches: ["main"]
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

  # Runs on pull requests to test the build
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build and deploy (leave empty for automatic detection)'
        required: false
        default: ''

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # We need history to get tags
          fetch-depth: 0
      
      - name: Setup Dagger CLI
        run: |
          curl -L https://dl.dagger.io/dagger/install.sh | sh
          export PATH=$PATH:$HOME/.dagger/bin
          dagger version
          
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: llvm-tools-preview

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Determine versions to build
        id: get-versions
        run: |
          VERSIONS_TO_PASS=""
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSIONS_TO_PASS="${{ github.event.inputs.version }}"
            echo "::notice::Using specific version(s) from input: $VERSIONS_TO_PASS"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSIONS_TO_PASS="${{ github.ref_name }}"
            echo "::notice::Building docs for tag: $VERSIONS_TO_PASS"
          elif [[ "${{ github.ref_name }}" == "main" && "${{ github.ref_type }}" == "branch" ]]; then
            VERSIONS_TO_PASS="main"
            echo "::notice::Building docs for main branch"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests, build as 'pr-test' version
            VERSIONS_TO_PASS="pr-test"
            echo "::notice::Building docs for pull request (test only)"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # This case handles manual trigger where inputs.version was empty (default)
            VERSIONS_TO_PASS="main"
            echo "::notice::Manual trigger with no specific version input, defaulting to build 'main'."
          else
            echo "::error::Could not determine a version to build. Event: ${{ github.event_name }}, Ref: ${{ github.ref }} (Name: ${{ github.ref_name }}, Type: ${{ github.ref_type }})"
            exit 1
          fi
          
          # If VERSIONS_TO_PASS can contain multiple space-separated versions (e.g. from input), ensure uniqueness.
          # The xtask expects space-separated versions.
          UNIQUE_VERSIONS=$(echo "$VERSIONS_TO_PASS" | xargs -n1 | sort -u | xargs)
          echo "VERSIONS_TO_BUILD=$UNIQUE_VERSIONS" >> $GITHUB_ENV
          echo "Final list of versions to build for xtask: $UNIQUE_VERSIONS"

      - name: Generate code coverage for documentation
        run: |
          echo "Generating code coverage for documentation inclusion"
          # Ensure xtask is compiled
          cargo build --package xtask
          # Add Dagger to PATH
          export PATH=$PATH:$HOME/.dagger/bin
          # Run quick coverage analysis to generate coverage.json for docs
          ./target/debug/xtask coverage
        env:
          RUST_LOG: info

      - name: Build documentation via Dagger and xtask
        run: |
          echo "Building documentation for versions: ${{ env.VERSIONS_TO_BUILD }}"
          # Add Dagger to PATH
          export PATH=$PATH:$HOME/.dagger/bin
          # Run the Dagger pipeline via xtask
          # The xtask command will handle connecting to Dagger and running the pipeline.
          # Output will be in ./docs_artifact (default or as specified)
          ./target/debug/xtask publish-docs-dagger --versions "${{ env.VERSIONS_TO_BUILD }}" --output-dir ./docs_artifact_final
        env:
          # DAGGER_LOG_FORMAT: plain # Optional: for cleaner logs in CI
          RUST_LOG: info # Optional: set log level for xtask/dagger-rs logs
          # If your Dagger pipeline needs access to GitHub token for private repos, etc.
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Dagger often picks this up via docker credentials

      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs_artifact_final' # Path where Dagger pipeline (via xtask) exports the final result
          
  # Deployment job
  deploy:
    # Only deploy when not a pull request
    if: github.event_name != 'pull_request'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
