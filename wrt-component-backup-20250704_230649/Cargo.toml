[package]
name = "wrt-component"
version.workspace = true
edition.workspace = true
description = "WebAssembly Component Model support for WRT"
license.workspace = true
repository.workspace = true
documentation = "https://docs.rs/wrt-component"
keywords = ["wasm", "webassembly", "runtime", "component-model"]
categories = ["wasm", "no-std"]

[lints]
workspace = true

[dependencies]
wrt-error = { workspace = true, default-features = false }
wrt-format = { workspace = true, default-features = false }
wrt-host = { workspace = true, default-features = false }
wrt-foundation = { workspace = true, default-features = false }
wrt-intercept = { workspace = true, default-features = false }
wrt-decoder = { workspace = true, default-features = false, optional = true }
wrt-runtime = { workspace = true, default-features = false }
wrt-sync = { workspace = true, default-features = false }

# No-std support (removed invalid alloc dependency)

# Optional dependencies
log = { version = "0.4", optional = true }

[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }

[features]
# By default, no features for pure no_std compatibility
# Binary choice: std OR no_std (no alloc middle ground)
default = []

# Standard library support
std = [
    "wrt-format/std",
    "wrt-host/std",
    "wrt-intercept/std",
    "wrt-decoder/std",
    "wrt-runtime/std",
    "wrt-sync/std",
    "wrt-error/std",
    "wrt-foundation/std",
    "wrt-foundation/wrt-allocator",
    "dep:log"]

# Allocation support for no_std environments
alloc = [
    "wrt-foundation/alloc",
    "wrt-format/alloc",
    "wrt-decoder/alloc",
    "wrt-runtime/alloc",
    "wrt-host/alloc",
    "wrt-intercept/alloc"]

# Safety level presets using capability-based features
qm = ["wrt-foundation/dynamic-allocation", "wrt-format/qm", "wrt-host/qm", "wrt-decoder/qm", "wrt-runtime/qm", "wrt-intercept/qm"]
asil-a = ["wrt-foundation/bounded-collections", "wrt-format/asil-a", "wrt-host/asil-a", "wrt-decoder/asil-a", "wrt-runtime/asil-a", "wrt-intercept/asil-a"]
asil-b = ["wrt-foundation/bounded-collections", "wrt-format/asil-b", "wrt-host/asil-b", "wrt-decoder/asil-b", "wrt-runtime/asil-b", "wrt-intercept/asil-b"]
asil-c = ["wrt-foundation/static-memory-safety", "wrt-format/asil-c", "wrt-host/asil-c", "wrt-decoder/asil-c", "wrt-runtime/asil-c", "wrt-intercept/asil-c"]
asil-d = ["wrt-foundation/asil-d", "wrt-format/asil-d", "wrt-host/asil-d", "wrt-decoder/asil-d", "wrt-runtime/asil-d", "wrt-intercept/asil-d"]

# Legacy compatibility features
safe-memory = ["asil-b"]
safety-asil-b = ["asil-b"]
safety-asil-c = ["asil-c"]
safety-asil-d = ["asil-d"]

# For compatibility with verification script
no_std = []

# Verification with Kani
kani = ["wrt-host/kani", "wrt-intercept/kani", "wrt-foundation/kani"]

# Performance features
optimize = [
    "wrt-format/optimize",
    "wrt-host/optimize",
    "wrt-foundation/optimize",
    "wrt-intercept/optimize",
    "wrt-decoder/optimize",
    "wrt-runtime/optimize"
]

# Debug logging
debug-log = []

# Component Model features
component-model-core = ["wrt-format/component-model-core"]
component-model-values = ["wrt-format/component-model-values"]
component-model-resources = ["wrt-format/component-model-resources"]
component-model-async = ["wrt-foundation/component-model-async"]
component-model-error-context = ["wrt-foundation/component-model-error-context"]
component-model-threading = ["wrt-foundation/component-model-threading"]
component-model-all = [
    "component-model-core",
    "component-model-values",
    "component-model-resources",
    "component-model-async",
    "component-model-error-context",
    "component-model-threading"
]

# Decoder support
decoder = ["dep:wrt-decoder"]


[[example]]
name = "component_info_simple"
path = "examples/component_info_simple.rs"
required-features = ["std"]

[[example]]
name = "interceptor_example"
path = "examples/interceptor_example.rs"
required-features = ["std"]

[[bench]]
name = "wrt_allocator_benchmarks"
harness = false
required-features = ["std", "safety-asil-c"]

[[bench]]
name = "zero_cost_validation"
harness = false
required-features = ["std", "safety-asil-c"]


 