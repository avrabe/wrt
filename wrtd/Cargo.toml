[package]
name = "wrtd"
version.workspace = true
edition.workspace = true
license = { workspace = true }
description = "WebAssembly Runtime Daemon - multiple optimized binaries for different environments"
repository = "https://github.com/pulseengine/wrt"
readme = "README.md"
keywords = ["wasm", "webassembly", "daemon", "runtime", "host"]
categories = ["wasm", "command-line-utilities", "network-programming"]

# Multiple binary targets for different runtime modes
[[bin]]
name = "wrtd-alloc" 
path = "src/alloc_main_simple.rs"
required-features = ["alloc-runtime"]

[[bin]]
name = "wrtd-nostd"
path = "src/nostd_main_simple.rs"
required-features = ["nostd-runtime"]

# Default binary (std mode)
[[bin]]
name = "wrtd"
path = "src/main_simple.rs"
required-features = ["std-runtime"]

[dependencies]
# Core WRT dependencies (conditionally included)
wrt = { workspace = true, default-features = false, optional = true }
wrt-component = { workspace = true, default-features = false, optional = true }
wrt-intercept = { workspace = true, default-features = false, optional = true }

# Standard library dependencies (std-runtime only)
clap = { version = "4.5.37", features = ["derive"], optional = true }
tracing = { version = "0.1", optional = true }
tracing-subscriber = { version = "0.3", features = ["json"], optional = true }
anyhow = { workspace = true, optional = true }
once_cell = { version = "1.18", optional = true }

# No-std dependencies
heapless = { version = "0.8", optional = true }
nb = { version = "1.0", optional = true }
linked_list_allocator = { version = "0.10", optional = true }

[features]
default = []

# Mutually exclusive runtime modes  
std-runtime = [
    # Core WRT dependencies temporarily disabled for demo
    # "dep:wrt",
    # "dep:wrt-component", 
    # "dep:wrt-intercept",
    # "wrt/std",
    # "wrt-component/std", 
    # "wrt-intercept/std",
    "dep:clap",
    "dep:tracing",
    "dep:tracing-subscriber", 
    "dep:anyhow",
    "dep:once_cell"
]

alloc-runtime = [
    # Core WRT dependencies temporarily disabled for demo
    # "dep:wrt",
    # "dep:wrt-component",
    # "dep:wrt-intercept", 
    # "wrt/alloc",
    # "wrt-component/alloc",
    # "wrt-intercept/alloc",
    "dep:heapless",
    "dep:anyhow",
    "dep:linked_list_allocator"
]

nostd-runtime = [
    # Core WRT dependencies temporarily disabled for demo
    # "dep:wrt",
    # "dep:wrt-component",
    # "dep:wrt-intercept",
    # "wrt/no_std",
    # "wrt-component/no_std", 
    # "wrt-intercept/no_std",
    "dep:heapless",
    "dep:nb"
]

[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)'] }
# Rule 1
# pointer_cast = "deny" # Disabled - unknown lint
# Rule 9
missing_docs = "deny"
unsafe_code = "forbid"

[lints.clippy]
# Rule 1: Language subset
inline_asm_x86_att_syntax = "warn"
transmute_ptr_to_ref = "deny"
type_id = "deny"
dyn_trait = "warn"
float_arithmetic = "warn"
# Rule 2: Unsafe usage
ptr_offset_with_cast = "warn"
# Rule 3: Error handling & panics
unwrap_used = "warn"
panic = "warn" # Also covers Rule 4
result_unit_err = "warn"
let_underscore_drop = "warn"
must_use_candidate = "warn"
must_use_unit = "warn"
# Rule 4: Control-flow soundness
match_wildcard_for_single_variants = "warn"
never_loop = "warn"
unreachable = "warn" # Also related to Rule 4
# Rule 5: Memory & concurrency safety
static_mut_reference = "deny"
arc_mutate = "deny"
# Rule 8: Static analysis gates (CI)
pedantic = "warn"
# Rule 9: Documentation
debug_assert_with_mut_call = "warn"

