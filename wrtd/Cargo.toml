[package]
name = "wrtd"
version.workspace = true
edition.workspace = true
license = { workspace = true }
description = "WebAssembly Runtime Daemon - minimal optimized binary for different environments"
repository = "https://github.com/pulseengine/wrt"
readme = "README.md"
keywords = ["wasm", "webassembly", "daemon", "runtime", "host"]
categories = ["wasm", "command-line-utilities", "network-programming"]

# Single binary with runtime mode detection
[[bin]]
name = "wrtd"
path = "src/main.rs"

[dependencies]
# Core WRT dependencies (minimal internal-only dependencies)
wrt-error = { workspace = true, default-features = false }
wrt-logging = { workspace = true, default-features = false }
# Centralized panic handler for safety-critical operation
wrt-panic = { workspace = true, default-features = false }

# Only add core WRT libraries when actually needed
wrt = { workspace = true, default-features = false, optional = true }
wrt-runtime = { workspace = true, default-features = false, optional = true }

# Standard library dependencies (std-runtime only)
clap = { version = "4.5.39", features = ["derive"], optional = true }
tracing = { version = "0.1", optional = true }
tracing-subscriber = { version = "0.3", features = ["json"], optional = true }
anyhow = { workspace = true, optional = true }
once_cell = { version = "1.18", optional = true }


# No external dependencies - use internal capabilities only

[features]
default = []

# Binary choice: std OR no_std (no alloc middle ground)
std = [
    "wrt-error/std",
    "wrt-logging/std"
]

# Enable actual WRT execution (vs demo mode)
wrt-execution = ["std", "dep:wrt", "dep:wrt-runtime"]

# Panic handler for no_std builds - ASIL-D compliant by default
enable-panic-handler = ["wrt-panic/default-panic-handler", "wrt-panic/asil-d", "dep:linked_list_allocator"]

# ASIL-B panic handler (lower safety requirements)
asil-b-panic = ["wrt-panic/default-panic-handler", "wrt-panic/asil-b", "dep:linked_list_allocator"]

# Development panic handler (enhanced debugging)
dev-panic = ["wrt-panic/default-panic-handler", "wrt-panic/dev", "dep:linked_list_allocator"]

[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)'] }
missing_docs = "deny"
unsafe_code = "deny"

[lints.clippy]
# Rule 1: Language subset
inline_asm_x86_att_syntax = "warn"
transmute_ptr_to_ref = "deny"
type_id = "deny"
dyn_trait = "warn"
float_arithmetic = "warn"
# Rule 2: Unsafe usage
ptr_offset_with_cast = "warn"
# Rule 3: Error handling & panics
unwrap_used = "warn"
panic = "warn" # Also covers Rule 4
result_unit_err = "warn"
let_underscore_drop = "warn"
must_use_candidate = "warn"
must_use_unit = "warn"
# Rule 4: Control-flow soundness
match_wildcard_for_single_variants = "warn"
never_loop = "warn"
unreachable = "warn" # Also related to Rule 4
# Rule 5: Memory & concurrency safety
static_mut_reference = "deny"
arc_mutate = "deny"
# Rule 8: Static analysis gates (CI)
pedantic = "warn"
# Rule 9: Documentation
debug_assert_with_mut_call = "warn"