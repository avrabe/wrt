# WRT - wrt-platform
# Module: Cargo Configuration
# SW-REQ-ID: REQ_PLATFORM_001
#
# Copyright (c) 2025 Ralf Anton Beier
# Licensed under the MIT license.
# SPDX-License-Identifier: MIT

[package]
name = "wrt-platform"
version.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
description = "Platform Abstraction Layer (Memory, Synchronization) for WRT."
readme = "README.md"
# repository = "..." # Add repository URL later
# homepage = "..." # Add homepage URL later
# documentation = "..." # Add docs URL later
keywords = ["webassembly", "wasm", "runtime", "platform", "memory", "sync"]
categories = ["wasm", "os"]

[dependencies]
wrt-error = { workspace = true } # Assuming wrt-error is in workspace.dependencies
wrt-sync = { workspace = true } # Add wrt-sync for synchronization primitives
# wrt-foundation = { workspace = true, optional = true } # Temporarily disabled to fix cyclic dependency
# libc dependency removed - using direct syscalls instead

[dev-dependencies]
criterion = { version = "0.6", features = ["html_reports"] }

[features]
default = [] # No std/alloc by default

# Standard features for cross-crate compatibility
std = ["wrt-error/std", "wrt-sync/std"] # , "wrt-foundation?/std"]
alloc = ["wrt-error/alloc", "wrt-sync/alloc"] # , "wrt-foundation?/alloc"]
no_std = []

# Feature for threading support (requires std)
threading = ["std"] # , "wrt-foundation"]

# libc dependency removed - using direct syscalls instead

# Platform-specific features
platform-macos = [] # platform-macos no longer activates alloc by default
platform-linux = [] # Linux support with direct syscalls
linux-mte = [] # Enhanced ARM64 MTE support for Linux
platform-qnx = [] # QNX Neutrino RTOS support
platform-zephyr = [] # Zephyr RTOS support
platform-tock = [] # Tock OS support
platform-vxworks = [] # VxWorks RTOS support (LKM and RTP)
# platform-baremetal = []
# arm-hardening = [] # If any platform code depends on this
helper-mode = [] # Added for C-ABI runtime
disable-panic-handler = ["wrt-error/disable-panic-handler", "wrt-sync/disable-panic-handler"] # Disable panic handler for library builds

[lib]
crate-type = ["rlib", "staticlib"] # staticlib for C ABI helper if needed later

[[bench]]
name = "cfi_performance_benchmarks"
harness = false

[lints.rust]
unsafe_code = "allow"
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(kani)', 'cfg(target_feature, values("shstk", "pku"))'] }
# Add other lints as needed, consistent with workspace 