# WRT - wrt-platform
# Module: Cargo Configuration
# SW-REQ-ID: REQ_PLATFORM_001
#
# Copyright (c) 2025 Ralf Anton Beier
# Licensed under the MIT license.
# SPDX-License-Identifier: MIT

[package]
name = "wrt-platform"
version.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
description = "Platform Abstraction Layer (Memory, Synchronization) for WRT."
readme = "README.md"
# repository = "..." # Add repository URL later
# homepage = "..." # Add homepage URL later
# documentation = "..." # Add docs URL later
keywords = ["webassembly", "wasm", "runtime", "platform", "memory", "sync"]
categories = ["wasm", "os"]

[dependencies]
wrt-error = { workspace = true } # Assuming wrt-error is in workspace.dependencies
libc = { version = "0.2", optional = true }

[features]
default = [] # No std/alloc by default

# Standard features for cross-crate compatibility
std = ["wrt-error/std"]
alloc = ["wrt-error/alloc"]
no_std = []

# Use libc for system calls (optional)
use-libc = ["dep:libc"]

# Platform-specific features
platform-macos = [] # platform-macos no longer activates alloc by default
platform-linux = [] # Linux support with direct syscalls
linux-mte = [] # Enhanced ARM64 MTE support for Linux
platform-qnx = [] # QNX Neutrino RTOS support
platform-zephyr = [] # Zephyr RTOS support
# platform-baremetal = []
# arm-hardening = [] # If any platform code depends on this
helper-mode = [] # Added for C-ABI runtime

[lib]
crate-type = ["rlib", "staticlib"] # staticlib for C ABI helper if needed later

[lints.rust]
unsafe_code = "allow"
# Add other lints as needed, consistent with workspace 