[package]
name = "wrt-sync"
version.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
description = "Synchronization primitives for WRT, supporting std and no_std environments."
keywords = ["wasm", "webassembly", "sync", "mutex", "rwlock", "no_std"]
categories = ["concurrency", "no-std", "wasm"]
# documentation = "..." # Add docs URL later
readme = "README.md"

[lib]
name = "wrt_sync"
path = "src/lib.rs"

[dependencies]
wrt-error = { workspace = true, default-features = false } # Ensure wrt-error is also alloc-free by default

# Optional: parking_lot for std-based advanced mutexes/rwlocks
parking_lot = { version = "0.12", optional = true }

# Removed alloc dependency - binary std/no_std choice

# No external dependencies needed
# Only used for formal verification when 'kani' feature is enabled
kani-verifier = { version = "0.62.0", optional = true }

[features]
default = []

# Core allocation strategies (aligned with wrt-foundation)
dynamic-allocation = ["dep:parking_lot"]
static-allocation = []
verified-static-allocation = ["static-allocation"]

# Capability features
compile-time-capacity-limits = []
runtime-bounds-checking = []
formal-verification-required = ["dep:kani-verifier"]

# ASIL capability levels - cumulative features
# QM: Basic functionality, no special safety requirements
qm = []

# ASIL-A: Basic safety with runtime checks
asil-a = [
    "qm",
    "runtime-bounds-checking"
]

# ASIL-B: Enhanced safety with lock validation and bounded operations
asil-b = [
    "asil-a",
    "bounded-collections",
    "lock-validation",
    "timeout-detection"
]

# ASIL-C: High safety with deadlock detection and static memory
asil-c = [
    "asil-b",
    "static-memory-safety",
    "deadlock-detection",
    "lock-ordering"
]

# ASIL-D: Maximum safety with priority inheritance and formal verification
asil-d = [
    "asil-c",
    "maximum-safety",
    "priority-inheritance",
    "bounded-wait-times",
    "formal-verification-required"
]

# Synchronization-specific features
lock-validation = []
timeout-detection = []
deadlock-detection = []
lock-ordering = []
priority-inheritance = []
bounded-wait-times = []

# Convenience bundles
bounded-collections = [
    "compile-time-capacity-limits",
    "runtime-bounds-checking"
]

static-memory-safety = [
    "static-allocation"
]

maximum-safety = [
    "verified-static-allocation",
    "formal-verification-required"
]

# Legacy compatibility
std = ["dynamic-allocation"]
no_std = []
alloc = ["no_std"]
safety-asil-b = ["asil-b"]
safety-asil-c = ["asil-c"]
safety-asil-d = ["asil-d"]
kani = ["formal-verification-required"]


[lints.rust]
unsafe_code = "allow"
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(feature, values("kani"))', 'cfg(coverage)', 'cfg(doc)'] }
missing_docs = "deny"

[lints.clippy]
# Critical lints
inline_asm_x86_att_syntax = "deny"
transmute_ptr_to_ref = "deny"
# Safety and correctness
float_arithmetic = "deny" # No floats in sync primitives
ptr_offset_with_cast = "deny"
# Robustness
unwrap_used = "deny"
expect_used = "deny"
panic = "deny" # Should use Result types
todo = "deny"
unimplemented = "deny"
result_unit_err = "deny" # Error types should convey meaning
# Style and best practices
must_use_candidate = "warn"
must_use_unit = "warn" # For functions returning Result<(), E>
match_wildcard_for_single_variants = "deny"
never_loop = "deny" # Use `loop` for intentional infinite loops only
unreachable = "deny"
# Pedantic lints (consider enabling selectively)
# pedantic = "warn" # Enable for stricter checks
debug_assert_with_mut_call = "warn"

# Configuration for Kani verification
# This will only be used when running `cargo kani`
[package.metadata.kani]
enabled-checks = ["assertion", "overflow"]
default-unwind = 3

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
