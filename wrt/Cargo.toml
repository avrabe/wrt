[package]
name = "wrt"
version.workspace = true
edition.workspace = true
description = "Pure Rust WebAssembly runtime supporting Core and Component Model specs"
license.workspace = true
repository = "https://github.com/avrabe/wrt"

[dependencies]
# Core allowed/necessary dependencies
log = { version = "0.4", optional = true }
# Error handling
wrt-error = { path = "../wrt-error", version = "0.2.0" }
# Synchronization primitives
wrt-sync = { path = "../wrt-sync", version = "0.2.0", features = ["std"] }
# Format handling (no longer optional)
wrt-format = { path = "../wrt-format", version = "0.2.0" }
# Shared type definitions
wrt-types = { path = "../wrt-types", version = "0.2.0" }
# WebAssembly decoding
wrt-decoder = { path = "../wrt-decoder", version = "0.2.0" }
# Runtime implementation
wrt-runtime = { path = "../wrt-runtime", version = "0.2.0" }
# Logging functionality
wrt-logging = { path = "../wrt-logging", version = "0.2.0" }
# Instruction implementations
wrt-instructions = { path = "../wrt-instructions", version = "0.2.0" }

[lib]
name = "wrt"
path = "src/lib.rs"
bench = false

[dev-dependencies]
criterion = "0.5"
wast = { version = "229.0.0" }
tempfile = "3.8"
tracing = "0.1"
tracing-subscriber = "0.3"
lazy_static = "1.4"
anyhow = { workspace = true }
hex = "0.4"
rayon = "1.5"
walkdir = "2.4"
# Add serialization crates for potential test usage
serde = { version = "1.0", features = ["derive"] }
# serde_json and bincode moved to [dependencies]

[[bench]]
name = "engine_benchmarks"
harness = false

[package.metadata.cargo-udeps.ignore]
dev-dependencies = ["criterion"]

[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)'] }

[features]
# Core features
default = ["minimal", "alloc", "std"]
# Minimal feature set
minimal = ["dep:log", "wrt-types/std", "wrt-decoder/minimal"]
# Full std feature
std = ["minimal", "alloc", 
       "wrt-error/std", 
       "wrt-sync/std", 
       "wrt-format/std", 
       "wrt-types/std", 
       "wrt-decoder/std", 
       "wrt-runtime/std", 
       "wrt-logging/std", 
       "wrt-instructions/std"]
# alloc feature for heap allocation
alloc = ["wrt-error/alloc", 
         "wrt-sync/alloc", 
         "wrt-format/alloc", 
         "wrt-types/alloc", 
         "wrt-decoder/alloc", 
         "wrt-runtime/alloc", 
         "wrt-logging/alloc", 
         "wrt-instructions/alloc"]
# no_std support
no_std = ["wrt-error/no_std", 
          "wrt-sync/no_std", 
          "wrt-format/no_std", 
          "wrt-types/no_std", 
          "wrt-decoder/no_std", 
          "wrt-runtime/no_std", 
          "wrt-logging/no_std", 
          "wrt-instructions/no_std"]
# Optimization for non-safety-critical paths
optimize = ["wrt-types/optimize", 
            "wrt-decoder/optimize", 
            "wrt-format/optimize", 
            "wrt-runtime/optimize", 
            "wrt-instructions/optimize"]
# Safety features for ASIL-B compliance
safety = ["wrt-types/safety", 
          "wrt-decoder/safety", 
          "wrt-format/safety", 
          "wrt-runtime/safety", 
          "wrt-instructions/safety",
          "alloc"]
# Proposal features (mostly placeholders/unused for now)
relaxed_simd = []
gc = []
function_references = []
multi_memory = []
exception_handling = []
threads = []
extended_const = []
tail_call = []
wasm_3_0 = []
wide_arithmetic = []
custom_page_sizes = []
annotations = []

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[[test]]
name = "test_rounding"
path = "tests/rounding_test.rs"

[[example]]
name = "checkpoint"
path = "examples/checkpoint.rs"
