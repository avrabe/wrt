[package]
name = "wrt"
version = "0.1.0"
edition = "2021"
description = "Pure Rust WebAssembly runtime supporting Core and Component Model specs"
license = "MIT"
repository = "https://github.com/avrabe/wrt"

[dependencies]
# Core allowed/necessary dependencies
log = { version = "0.4", optional = true }
anyhow = { workspace = true, optional = true }
serde = { version = "1.0", features = ["derive"], optional = true }
wat = { version = "1.0.53", optional = true }
serde_json = { version = "1.0", optional = true }
bincode = { version = "2.0", optional = true }
# Error handling
wrt-error = { path = "../wrt-error", version = "0.1.0" }
# Synchronization primitives
wrt-sync = { path = "../wrt-sync", version = "0.1.0" }
# Format handling (no longer optional)
wrt-format = { path = "../wrt-format", version = "0.1.0" }
# Shared type definitions
wrt-types = { path = "../wrt-types", version = "0.1.0" }
# WebAssembly decoding
wrt-decoder = { path = "../wrt-decoder", version = "0.1.0" }
# Runtime implementation
wrt-runtime = { path = "../wrt-runtime", version = "0.1.0" }
# Logging functionality
wrt-logging = { path = "../wrt-logging", version = "0.1.0" }
# Instruction implementations
wrt-instructions = { path = "../wrt-instructions", version = "0.1.0" }
# WASI dependencies (optional)
wasi-common = { version = "17.0.3", optional = true }
wasi-cap-std-sync = { version = "17.0.3", optional = true }
cap-std = { version = "2.0.0", optional = true }
wasi = { version = "0.11.0", optional = true }
# Other required dependencies
parking_lot = { version = "0.12" } # Required for stackless.rs
wasmparser = { version = "0.227.1", optional = true } # Updated to match the wast crate version

[lib]
name = "wrt"
path = "src/lib.rs"
bench = false

[dev-dependencies]
criterion = "0.5"
wast = { version = "227.0.1", features = ["wasm-module", "component-model"] }
tempfile = "3.8"
tracing = "0.1"
tracing-subscriber = "0.3"
lazy_static = "1.4"
anyhow = { workspace = true }
hex = "0.4"
rayon = "1.5"
walkdir = "2.4"
# Add serialization crates for potential test usage
serde = { version = "1.0", features = ["derive"] }
# serde_json and bincode moved to [dependencies]

[[bench]]
name = "engine_benchmarks"
harness = false

[package.metadata.cargo-udeps.ignore]
dev-dependencies = ["criterion"]

[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)'] }

[features]
# Core features
default = ["minimal", "alloc", "std"]
# Minimal feature set
minimal = ["dep:anyhow", "dep:log", "wrt-types/std", "wrt-decoder/minimal"]
# Full std feature
std = ["minimal", "dep:wasmparser", "alloc", "wrt-types/std", "wrt-decoder/std"]
# alloc feature for heap allocation
alloc = [] # Tentatively enable with alloc
# no_std support
no_std = ["wrt-types/no_std", "wrt-decoder/no_std"]
# Optimization for non-safety-critical paths
optimize = ["wrt-types/optimize", "wrt-decoder/optimize"]
# Safety features for ASIL-B compliance
safety = ["wrt-types/safety", "wrt-decoder/safety"]
# Optional features dependent on std
serialization = ["dep:serde", "dep:bincode", "dep:serde_json", "alloc", "std"]
wasi = ["dep:wasi-common", "dep:wasi-cap-std-sync", "dep:cap-std", "dep:wasi", "std"]
wat-parsing = ["dep:wat", "std", "wrt-decoder/wat"]
component-json = ["dep:serde", "dep:serde_json", "std"]
# Proposal features (mostly placeholders/unused for now)
relaxed_simd = []
gc = []
function_references = []
multi_memory = []
exception_handling = []
threads = []
extended_const = []
tail_call = []
wasm_3_0 = []
wide_arithmetic = []
custom_page_sizes = []
annotations = []

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[[test]]
name = "test_rounding"
path = "tests/rounding_test.rs"

[[example]]
name = "checkpoint"
path = "examples/checkpoint.rs"
required-features = ["serialization"]
