[package]
name = "wrt"
version.workspace = true
edition.workspace = true
description = "Pure Rust WebAssembly runtime supporting Core and Component Model specs"
license.workspace = true
repository.workspace = true
readme = "../README.md"
keywords = ["webassembly", "wasm", "runtime", "no_std", "component-model"]
categories = ["wasm", "no-std", "embedded", "web-programming"]

[dependencies]
# Core allowed/necessary dependencies
# Error handling
wrt-error = { workspace = true }
# Core foundation library
wrt-foundation = { workspace = true }
# Format specifications
wrt-format = { workspace = true }
# Binary parsing
wrt-decoder = { workspace = true }
# Instruction encoding/decoding
wrt-instructions = { workspace = true }
# Synchronization primitives
wrt-sync = { workspace = true }
# Function interception
wrt-intercept = { workspace = true }
# Host interface
wrt-host = { workspace = true }
# Component model
wrt-component = { workspace = true }
# Runtime execution
wrt-runtime = { workspace = true }
# Logging functionality
wrt-logging = { workspace = true }
# Platform abstraction layer
wrt-platform = { workspace = true, features = ["disable-panic-handler"] }
# Math operations
wrt-math = { workspace = true }

[lib]
name = "wrt"
path = "src/lib.rs"
bench = false

[dev-dependencies]
criterion = "0.6"
wast = { version = "232.0.0" }
tempfile = "3.8"
tracing = "0.1"
tracing-subscriber = "0.3"
lazy_static = "1.4"
anyhow = { workspace = true }
hex = "0.4"
rayon = "1.5"
walkdir = "2.4"

[[bench]]
name = "engine_benchmarks"
harness = false

[package.metadata.cargo-udeps.ignore]
dev-dependencies = ["criterion"]

[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)'] }
# Rule 1
# pointer_cast = "deny" # Removed as it's an unknown lint
# Rule 9
missing_docs = "deny"
unsafe_code = "forbid"

[lints.clippy]
# Rule 1: Language subset
inline_asm_x86_att_syntax = "warn"
transmute_ptr_to_ref = "deny"
type_id = "deny"
dyn_trait = "warn"
float_arithmetic = "warn"
# Rule 2: Unsafe usage
ptr_offset_with_cast = "warn"
# Rule 3: Error handling & panics
unwrap_used = "warn"
panic = "warn" # Also covers Rule 4
result_unit_err = "warn"
let_underscore_drop = "warn"
must_use_candidate = "warn"
must_use_unit = "warn"
# Rule 4: Control-flow soundness
match_wildcard_for_single_variants = "warn"
never_loop = "warn"
unreachable = "warn" # Also related to Rule 4
# Rule 5: Memory & concurrency safety
static_mut_reference = "deny"
arc_mutate = "deny"
# Rule 8: Static analysis gates (CI)
pedantic = "warn"
# Rule 9: Documentation
debug_assert_with_mut_call = "warn"

[features]
# Core features - default to no_std
# Binary choice: std OR no_std (no alloc middle ground)
default = ["no_std"]
# Minimal feature set
minimal = ["wrt-decoder/no_std"]
# Full std feature
std = [
    "wrt-error/std",
    "wrt-runtime/std",
    "wrt-host/std",
    "wrt-logging/std",
    "wrt-foundation/std",
    "wrt-sync/std",
    "wrt-format/std",
    "wrt-decoder/std",
    "wrt-math/std",
    "wrt-component/std",
    "wrt-instructions/std",
    "wrt-intercept/std",
    "wrt-platform/std"]
# no_std support
no_std = ["wrt-format/no_std", 
          "wrt-decoder/no_std", 
          "wrt-runtime/no_std", 
          "wrt-logging/no_std", 
          "wrt-instructions/no_std",
          "wrt-intercept/no_std",
          "wrt-host/no_std",
          "wrt-component/no_std"]
# Optimization for non-safety-critical paths
optimize = ["wrt-foundation/optimize", 
            "wrt-decoder/optimize", 
            "wrt-format/optimize", 
            "wrt-runtime/optimize", 
            "wrt-instructions/optimize",
            "wrt-intercept/optimize",
            "wrt-host/optimize",
            "wrt-component/optimize"]
# Safety features for ASIL-B compliance
safety = ["wrt-foundation/safety", 
          "wrt-decoder/safety", 
          "wrt-format/safety", 
          "wrt-runtime/safety", 
          "wrt-instructions/safety",
          "wrt-intercept/safety",
          "wrt-host/safety",
          "wrt-component/safety"]
# Platform and Helper Mode Features
helper-mode = ["wrt-platform/helper-mode"]
# Disable panic handler for library usage
disable-panic-handler = []
platform-macos = ["wrt-platform/platform-macos"]
# Platform feature enables SIMD operations
platform = ["wrt-math/platform"]
# Proposal features (mostly placeholders/unused for now)
relaxed_simd = []
gc = []
function_references = []
multi_memory = []
exception_handling = []
threads = []
extended_const = []
tail_call = []
wasm_3_0 = []
wide_arithmetic = []
custom_page_sizes = []
annotations = []

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[[test]]
name = "test_rounding"
path = "tests/rounding_test.rs"

[[example]]
name = "checkpoint"
path = "examples/checkpoint.rs"
