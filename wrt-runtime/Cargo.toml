[package]
name = "wrt-runtime"
version.workspace = true
edition.workspace = true
description = "WebAssembly Component Model Runtime for WRT"
license.workspace = true
repository.workspace = true
documentation = "https://docs.rs/wrt-runtime"
readme = "README.md"
keywords = ["wasm", "webassembly", "runtime", "component-model"]
categories = ["wasm", "no-std"]

[lints]
workspace = true

[dependencies]
wrt-error = { workspace = true, default-features = false }
wrt-foundation = { workspace = true, default-features = false }
wrt-format = { workspace = true, default-features = false }
wrt-sync = { workspace = true, default-features = false }
# wrt-decoder = { workspace = true, default-features = false }
wrt-instructions = { workspace = true, default-features = false }
wrt-host = { workspace = true, default-features = false, optional = true }
wrt-intercept = { workspace = true, default-features = false }
wrt-platform = { workspace = true, default-features = false, optional = true }
wrt-debug = { workspace = true, default-features = false, optional = true }

# No-std support (removed invalid alloc dependency)

# No additional dependencies for now

[features]
default = [] # no_std + no_alloc by default for safety-critical core
# Binary choice: std OR no_std (no alloc middle ground)
std = [
    # "wrt-decoder/std",
    "wrt-format/std",
    "dep:wrt-host",
    "wrt-host?/std",
    "wrt-instructions/std",
    "wrt-intercept/std",
    "dep:wrt-platform",
    "wrt-platform?/std",
    "wrt-sync/std",
    "wrt-foundation/std"]

# Allocation support for no_std environments
alloc = [
    "wrt-foundation/alloc",
    "wrt-format/alloc",
    "wrt-host?/alloc",
    "wrt-instructions/alloc",
    "wrt-intercept/alloc"]
# Debug support features
debug = ["dep:wrt-debug", "wrt-debug/line-info"]
debug-full = ["dep:wrt-debug", "wrt-debug/full-debug"]
wit-debug-integration = ["dep:wrt-debug", "wrt-debug/wit-integration", "std"]
# For compatibility with verification script
# This is a no-op since the crate is no_std by default
no_std = []
optimize = [
    "wrt-foundation/optimize",
    # "wrt-decoder/optimize",
    "wrt-instructions/optimize",
    "wrt-host?/optimize",
    "wrt-intercept/optimize"]

# Safety level presets using capability-based features
qm = ["wrt-foundation/dynamic-allocation"]
asil-a = ["wrt-foundation/bounded-collections"]
asil-b = ["wrt-foundation/bounded-collections"]
asil-c = ["wrt-foundation/static-memory-safety"]
asil-d = ["wrt-foundation/maximum-safety"]

# Legacy compatibility features
safe-memory = ["asil-b"]
safety-asil-b = ["asil-b"]
safety-asil-c = ["asil-c"]
safety-asil-d = ["asil-d"]

# Platform features - properly abstracted for ASIL compliance
# Platform sync enables native platform synchronization primitives
platform-sync = ["dep:wrt-platform", "wrt-platform?/std"]
# Specific platform support (requires platform-sync)
platform-macos = ["platform-sync", "wrt-platform?/platform-macos"]
platform-linux = ["platform-sync", "wrt-platform?/platform-linux"]
platform-qnx = ["platform-sync", "wrt-platform?/platform-qnx"]
platform-embedded = ["dep:wrt-platform"] # Minimal platform support
helper-mode = ["dep:wrt-platform", "wrt-platform?/helper-mode"]

# Verification features
kani = []
kani-verifier = []


