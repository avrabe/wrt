[package]
name = "wrt-runtime"
version.workspace = true
edition.workspace = true
description = "WebAssembly Component Model Runtime for WRT"
license.workspace = true
repository.workspace = true
documentation = "https://docs.rs/wrt-runtime"
readme = "README.md"
keywords = ["wasm", "webassembly", "runtime", "component-model"]
categories = ["wasm", "no-std"]

[dependencies]
wrt-error = { workspace = true, default-features = false }
wrt-types = { workspace = true, default-features = false }
wrt-sync = { workspace = true, default-features = false }
wrt-decoder = { workspace = true, default-features = false }
wrt-instructions = { workspace = true, default-features = false }
wrt-host = { workspace = true, default-features = false }
wrt-intercept = { workspace = true, default-features = false }
wrt-platform = { workspace = true, default-features = false }

# No-std support
alloc = { version = "1.0.0", optional = true, package = "rustc-std-workspace-alloc" }

# No additional dependencies for now

[features]
default = []
std = [
    "dep:alloc",
    "wrt-decoder/std",
    "wrt-host/std",
    "wrt-instructions/std",
    "wrt-intercept/std",
    "wrt-platform/std",
    "wrt-sync/std",
    "wrt-types/std",
]
# For compatibility with verification script
# This is a no-op since the crate is no_std by default
no_std = []
alloc = [
    "dep:alloc",
    "wrt-decoder/alloc",
    "wrt-host/alloc",
    "wrt-instructions/alloc",
    "wrt-intercept/alloc",
    "wrt-platform/alloc",
    "wrt-sync/alloc",
    "wrt-types/alloc",
]
optimize = [
    "wrt-types/optimize",
    "wrt-decoder/optimize",
    "wrt-instructions/optimize",
    "wrt-host/optimize",
    "wrt-intercept/optimize",
]

# Safe memory implementations
safe-memory = [
    "wrt-types/safe-memory",
]
safety = [
    "wrt-types/safety",
    "wrt-decoder/safety",
    "wrt-instructions/safety",
    "wrt-host/safety",
    "wrt-intercept/safety",
]
kani = []
kani-verifier = []
platform-macos = ["wrt-platform/platform-macos"]
helper-mode = ["wrt-platform/helper-mode"]

[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)'] }
unused_imports = "allow"
unused_variables = "allow"
unused_mut = "allow"
unsafe_code = "forbid"
# Rule 1
pointer_cast = "deny"
# Rule 9
missing_docs = "deny"

[lints.clippy]
# Rule 1: Language subset
inline_asm_x86_att_syntax = "warn"
transmute_ptr_to_ref = "deny"
type_id = "deny"
dyn_trait = "warn"
float_arithmetic = "warn"
# Rule 2: Unsafe usage
ptr_offset_with_cast = "warn"
# Rule 3: Error handling & panics
unwrap_used = "warn"
panic = "warn" # Also covers Rule 4
result_unit_err = "warn"
let_underscore_drop = "warn"
must_use_candidate = "warn"
must_use_unit = "warn"
# Rule 4: Control-flow soundness
match_wildcard_for_single_variants = "warn"
never_loop = "warn"
unreachable = "warn" # Also related to Rule 4
# Rule 5: Memory & concurrency safety
static_mut_reference = "deny"
arc_mutate = "deny"
# Rule 8: Static analysis gates (CI)
pedantic = "warn"
# Rule 9: Documentation
debug_assert_with_mut_call = "warn"

[dev-dependencies]
proptest = "1.4.0" 