//! Defines the `ResultExt` trait for adding context to errors.

#[cfg(feature = "alloc")]
use super::error::Error;
use super::source::ErrorSource;
use core::fmt::{self, Debug, Display};
use core::result::Result as CoreResult;

#[cfg(feature = "alloc")]
extern crate alloc;

/// Provides the `context` method for `Result`.
///
/// This trait is only available when the `alloc` feature is enabled.
#[cfg(feature = "alloc")]
pub trait ResultExt<T, E> {
    /// Wraps the error value with additional context.
    fn context<C>(self, context: C) -> CoreResult<T, Error>
    where
        C: Display + Debug + Send + Sync + 'static;

    /// Wraps the error value with context generated by a closure.
    fn with_context<C, F>(self, f: F) -> CoreResult<T, Error>
    where
        C: Display + Debug + Send + Sync + 'static,
        F: FnOnce() -> C;
}

#[cfg(feature = "alloc")]
impl<T, E> ResultExt<T, E> for CoreResult<T, E>
where
    E: ErrorSource + Send + Sync + 'static,
{
    fn context<C>(self, context: C) -> CoreResult<T, Error>
    where
        C: Display + Debug + Send + Sync + 'static,
    {
        match self {
            Ok(value) => Ok(value),
            Err(error) => Err(Error::new(ContextError {
                context,
                source: error,
            })),
        }
    }

    fn with_context<C, F>(self, f: F) -> CoreResult<T, Error>
    where
        C: Display + Debug + Send + Sync + 'static,
        F: FnOnce() -> C,
    {
        match self {
            Ok(value) => Ok(value),
            Err(error) => Err(Error::new(ContextError {
                context: f(),
                source: error,
            })),
        }
    }
}

/// Helper struct for adding context to errors.
#[cfg(feature = "alloc")]
#[derive(Debug)]
struct ContextError<C, E> {
    context: C,
    source: E,
}

#[cfg(feature = "alloc")]
impl<C, E> Display for ContextError<C, E>
where
    C: Display,
    E: Display,
{
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}: {}", self.context, self.source)
    }
}

#[cfg(all(feature = "std", feature = "alloc"))]
impl<C, E> std::error::Error for ContextError<C, E>
where
    C: Display + Debug + Send + Sync + 'static,
    E: ErrorSource + Send + Sync + 'static,
{
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        // In std context, we should ideally convert the ErrorSource trait object to std::error::Error,
        // but we can't safely do this type conversion, so we return None for now
        None
    }
}

#[cfg(feature = "alloc")]
impl<C, E> ErrorSource for ContextError<C, E>
where
    C: Display + Debug + Send + Sync + 'static,
    E: ErrorSource + Send + Sync + 'static,
{
    #[cfg(feature = "std")]
    fn source(&self) -> Option<&(dyn ErrorSource + 'static)> {
        Some(&self.source)
    }
}
