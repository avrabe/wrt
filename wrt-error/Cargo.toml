[package]
name = "wrt-error"
version.workspace = true
edition.workspace = true
license.workspace = true
description = "Error handling for the WRT WebAssembly runtime"

[lib]
name = "wrt_error"
path = "src/lib.rs"

[dependencies]
# No external dependencies by default
# Optional dependencies
anyhow = { workspace = true, optional = true }

# For advanced error integration with other libraries
wasmparser = { version = "0.227.1", optional = true }
serde_json = { version = "1.0", optional = true }
bincode = { version = "2.0", optional = true }
wat = { version = "1.0.53", optional = true }
wasi-common = { version = "17.0.3", optional = true }
cap-std = { version = "2.0.0", optional = true }

# Formal verification (not a direct dependency, only used with the cargo kani command)
kani-verifier = { version = "0.61.0", optional = true }

[features]
default = ["minimal"]
# Core features - a minimal subset for no_std support
minimal = ["alloc"]
# Standard library features
std = ["minimal"]
# For no_std, we need to enable alloc
alloc = []
# For complete no_std/no_alloc support
no_std = []
# Optional integration with other libraries
wasmparser = ["dep:wasmparser", "std"]
serde_json = ["dep:serde_json", "std"]
bincode = ["dep:bincode", "std"]
wat = ["dep:wat", "std"]
wasi = ["dep:wasi-common", "dep:cap-std", "std"]
# Formal verification with the Kani verifier
kani = ["std", "dep:kani-verifier"]

[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)'] }

# Configuration for Kani verification
[package.metadata.kani]
enabled-checks = ["assertion", "overflow"]
default-unwind = 2