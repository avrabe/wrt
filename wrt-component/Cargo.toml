[package]
name = "wrt-component"
version.workspace = true
edition.workspace = true
description = "WebAssembly Component Model support for WRT"
license.workspace = true
repository.workspace = true
documentation = "https://docs.rs/wrt-component"
keywords = ["wasm", "webassembly", "runtime", "component-model"]
categories = ["wasm", "no-std"]

[dependencies]
wrt-error = { workspace = true, default-features = false }
wrt-format = { workspace = true, default-features = false }
wrt-host = { workspace = true, default-features = false }
wrt-foundation = { workspace = true, default-features = false }
wrt-intercept = { workspace = true, default-features = false }
wrt-decoder = { workspace = true, default-features = false }
wrt-runtime = { workspace = true, default-features = false }
wrt-sync = { workspace = true, default-features = false }

# No-std support (removed invalid alloc dependency)

# Optional dependencies
log = { version = "0.4", optional = true }
futures = { version = "0.3", optional = true }

[dev-dependencies]

[features]
# By default, use alloc (component model needs dynamic allocation)
default = ["alloc"]

# Standard library support
std = [
    "wrt-format/std",
    "wrt-host/std",
    "wrt-intercept/std",
    "wrt-decoder/std",
    "wrt-runtime/std",
    "wrt-sync/std",
    "wrt-error/std",
    "wrt-foundation/std",
    "dep:log",
]

# For compatibility with verification script
# This is a no-op since the crate is no_std by default
no_std = [
]

# Alloc support (required for no_std)
alloc = [
    "wrt-format/alloc",
    "wrt-host/alloc",
    "wrt-intercept/alloc",
    "wrt-decoder/alloc",
    "wrt-runtime/alloc",
    "wrt-sync/alloc",
    "wrt-error/alloc",
    "wrt-foundation/alloc"
]

# Verification with Kani
kani = ["wrt-host/kani", "wrt-intercept/kani", "wrt-foundation/kani"]

# Performance and safety features
optimize = [
    "wrt-format/optimize",
    "wrt-host/optimize",
    "wrt-foundation/optimize",
    "wrt-intercept/optimize",
    "wrt-decoder/optimize",
    "wrt-runtime/optimize"
]

# Safety features (always includes alloc)
safety = [
    "wrt-format/safety",
    "wrt-host/safety",
    "wrt-foundation/safety",
    "wrt-intercept/safety",
    "wrt-decoder/safety",
    "wrt-runtime/safety",
    "alloc"
]

# Debug logging
debug-log = []

# Safe memory implementations
safe-memory = [
    "wrt-foundation/safe-memory",
    "wrt-format/safe-memory",
    "wrt-runtime/safe-memory",
]

# Component Model features
component-model-core = ["wrt-format/component-model-core"]
component-model-values = ["wrt-format/component-model-values"]
component-model-resources = ["wrt-format/component-model-resources"]
component-model-async = ["wrt-foundation/component-model-async", "futures"]
component-model-error-context = ["wrt-foundation/component-model-error-context"]
component-model-threading = ["wrt-foundation/component-model-threading"]
component-model-all = [
    "component-model-core",
    "component-model-values",
    "component-model-resources",
    "component-model-async",
    "component-model-error-context",
    "component-model-threading"
]

[[example]]
name = "component_info_simple"
path = "examples/component_info_simple.rs"
required-features = ["std"]

[[example]]
name = "interceptor_example"
path = "examples/interceptor_example.rs"
required-features = ["std"]


[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)'] }
# Rule 1
pointer_cast = "deny"
# Rule 9
missing_docs = "deny"
unsafe_code = "forbid"

[lints.clippy]
# Rule 1: Language subset
inline_asm_x86_att_syntax = "warn"
transmute_ptr_to_ref = "deny"
type_id = "deny"
dyn_trait = "warn"
float_arithmetic = "warn"
# Rule 2: Unsafe usage
ptr_offset_with_cast = "warn"
# Rule 3: Error handling & panics
unwrap_used = "warn"
panic = "warn" # Also covers Rule 4
result_unit_err = "warn"
let_underscore_drop = "warn"
must_use_candidate = "warn"
must_use_unit = "warn"
# Rule 4: Control-flow soundness
match_wildcard_for_single_variants = "warn"
never_loop = "warn"
unreachable = "warn" # Also related to Rule 4
# Rule 5: Memory & concurrency safety
static_mut_refs = "deny"
arc_mutate = "deny"
# Rule 8: Static analysis gates (CI)
pedantic = "warn"
# Rule 9: Documentation
debug_assert_with_mut_call = "warn" 