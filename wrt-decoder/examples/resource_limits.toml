# Example resource limits configuration for WebAssembly modules
# This file demonstrates how to configure execution limits for different ASIL levels

version = 1

# Execution limits for the WebAssembly runtime
[execution]
max_fuel_per_step = 1000000        # Maximum fuel units per execution step
max_memory_usage = "64M"           # Maximum memory usage (supports K, M, G suffixes)
max_call_depth = 100               # Maximum call stack depth
max_instructions_per_step = 10000  # Maximum instructions executed per step
max_execution_slice_ms = 50        # Maximum execution time per slice in milliseconds

# Resource-specific limits
[resources.filesystem]
max_handles = 128                  # Maximum file handles
max_memory = "16M"                 # Maximum memory for filesystem operations
max_operations_per_second = 1000   # Rate limiting

# Custom limits for filesystem
[resources.filesystem.custom]
max_file_size = 10485760          # 10MB max file size
max_path_length = 4096            # Maximum path length
max_open_files = 50               # Maximum simultaneously open files

[resources.network]
max_handles = 64                   # Maximum network connections
max_memory = "8M"                  # Maximum memory for network buffers
max_operations_per_second = 500    # Rate limiting for network operations

[resources.network.custom]
max_connection_timeout_ms = 30000  # 30 second timeout
max_request_size = 1048576         # 1MB max request size
max_response_size = 10485760       # 10MB max response size

[resources.timers]
max_handles = 32                   # Maximum concurrent timers
max_operations_per_second = 100    # Rate limiting for timer operations

[resources.memory]
max_handles = 16                   # Maximum memory mappings
max_memory = "256M"                # Maximum mapped memory

# Qualification information for ASIL compliance
[qualification]
# SHA-256 hash of the qualified binary (64 hex characters)
binary_hash = "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
asil_level = "ASIL-D"             # Qualified ASIL level

# ASIL-D specific configuration example
# - All limits are strictly enforced
# - No dynamic allocation after initialization
# - Deterministic execution guaranteed
# - Suitable for safety-critical automotive applications

# ASIL-B configuration would allow:
# - Some dynamic allocation within budgets
# - Less strict timing requirements
# - Still suitable for safety-relevant applications

# QM (Quality Management) configuration would allow:
# - Full dynamic allocation
# - No strict timing requirements
# - Suitable for non-safety-critical applications