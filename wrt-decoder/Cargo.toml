[package]
name = "wrt-decoder"
version.workspace = true
edition.workspace = true
description = "WebAssembly module decoder for wrt runtime"
license.workspace = true
repository = "https://github.com/avrabe/wrt"
readme = "README.md"
keywords = ["wasm", "webassembly", "decoder", "parser", "runtime"]
categories = ["wasm", "parsing", "no-std", "embedded"]

[dependencies]
# Error handling
wrt-error = { path = "../wrt-error", version = "0.2.0", default-features = false }
# Format handling
wrt-format = { path = "../wrt-format", version = "0.2.0", default-features = false }
# Shared type definitions
wrt-types = { path = "../wrt-types", version = "0.2.0", default-features = false }

# Core dependencies
log = { version = "0.4", optional = true }
# WAT parsing (for testing)
wat = { version = "1.229.0", optional = true }

[dev-dependencies]
criterion = "0.5"
tempfile = "3.8"
proptest = "1.4"
hex = "0.4"
wat = "1.229.0"

[features]
default = [
    "minimal",
    "std",
    "component-model-core",
    "component-model-values"
]
minimal = ["dep:log"]
std = ["wrt-error/std", "wrt-format/std", "wrt-types/std"]
alloc = ["wrt-error/alloc", "wrt-format/alloc", "wrt-types/alloc"]
no_std = ["wrt-error/no_std", "wrt-format/no_std", "wrt-types/no_std"]
optimize = ["wrt-types/optimize", "wrt-format/optimize"]
safety = ["wrt-types/safety", "wrt-format/safety"]
wat = ["dep:wat", "std"]

# Component Model features
component-model-core = ["wrt-format/component-model-core"]
component-model-values = ["wrt-format/component-model-values"]
component-model-resources = ["wrt-format/component-model-resources"]
component-model-fixed-lists = ["wrt-format/component-model-fixed-lists"]
component-model-namespaces = ["wrt-format/component-model-namespaces"]
component-model-all = [
    "component-model-core",
    "component-model-values",
    "component-model-resources",
    "component-model-fixed-lists",
    "component-model-namespaces"
]

# Type conversion feature
conversion = ["wrt-format/conversion"]

[profile.release]
panic = "abort"

[profile.test]
panic = "abort"

[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)', 'cfg(kani)', 'cfg(coverage)', 'cfg(doc)'] }
# Rule 1
pointer_cast = "deny"
# Rule 9
missing_docs = "deny"
unsafe_code = "forbid"

[lints.clippy]
# Rule 1: Language subset
inline_asm_x86_att_syntax = "warn"
transmute_ptr_to_ref = "deny"
type_id = "deny"
dyn_trait = "warn"
float_arithmetic = "warn"
# Rule 2: Unsafe usage
ptr_offset_with_cast = "warn"
# Rule 3: Error handling & panics
unwrap_used = "warn"
panic = "warn" # Also covers Rule 4
result_unit_err = "warn"
let_underscore_drop = "warn"
must_use_candidate = "warn"
must_use_unit = "warn"
# Rule 4: Control-flow soundness
match_wildcard_for_single_variants = "warn"
never_loop = "warn"
unreachable = "warn" # Also related to Rule 4
# Rule 5: Memory & concurrency safety
static_mut_reference = "deny"
arc_mutate = "deny"
# Rule 8: Static analysis gates (CI)
pedantic = "warn"
# Rule 9: Documentation
debug_assert_with_mut_call = "warn"

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"] 