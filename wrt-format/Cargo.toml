[package]
name = "wrt-format"
version.workspace = true
edition.workspace = true
description = "WebAssembly format handling for WRT"
license.workspace = true
repository.workspace = true
readme = "README.md"
keywords = ["wasm", "webassembly", "format", "binary", "no-std"]
categories = ["wasm", "parsing", "data-structures", "no-std", "embedded"]

[dependencies]
wrt-error = { workspace = true, default-features = false }
wrt-foundation = { workspace = true, default-features = false }

[dev-dependencies]
# For property testing
proptest = "1.0.0"

# For formal verification (moved to dependencies with optional flag)
[dependencies.kani-verifier]
version = "0.62.0"
optional = true

[features]
default = []
std = ["wrt-foundation/std"]
# This crate is no_std by default, this feature is a no-op for compatibility
no_std = []
alloc = ["wrt-foundation/alloc"]
optimize = ["wrt-foundation/optimize"]
safety = ["wrt-foundation/safety"]
# The 'kani' feature enables formal verification with the Kani verifier
kani = ["dep:kani-verifier"]

# Component Model features
component-model-core = ["wrt-foundation/component-model-core"]
component-model-values = ["wrt-foundation/component-model-values"]
component-model-resources = ["wrt-foundation/component-model-resources"]
component-model-canonical = []
component-model-fixed-lists = ["wrt-foundation/component-model-fixed-lists"]
component-model-error-context = ["wrt-foundation/component-model-error-context"]
component-model-async = ["wrt-foundation/component-model-async"]
component-model-threading = ["wrt-foundation/component-model-threading"]
component-model-namespaces = ["wrt-foundation/component-model-namespaces"]

# Grouped features
component-model-all = [
    "component-model-core",
    "component-model-values",
    "component-model-resources",
    "component-model-canonical",
    "component-model-fixed-lists",
    "component-model-error-context",
    "component-model-async",
    "component-model-threading",
    "component-model-namespaces"
]

# Type conversion feature
conversion = []

# Safe memory implementations
safe-memory = ["wrt-foundation/safe-memory"]

# LSP (Language Server Protocol) support
lsp = ["std"]

# Config for linting
[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)', 'cfg(kani)', 'cfg(coverage)', 'cfg(doc)'] }
# Rule 1
# pointer_cast = "deny" # Not a standard Rust lint, covered by forbid(unsafe_code) and clippy::cast_ptr_alignment etc.
# Rule 9
missing_docs = "deny"
unsafe_code = "forbid"

[lints.clippy]
# Rule 1: Language subset
inline_asm_x86_att_syntax = "deny"
transmute_ptr_to_ref = "deny"
type_id = "deny"
dyn_trait = "deny"
float_arithmetic = "deny"
# Rule 2: Unsafe usage
ptr_offset_with_cast = "deny"
# Rule 3: Error handling & panics
unwrap_used = "deny"
expect_used = "deny" # Added for completeness with unwrap_used
panic = "deny" # Also covers Rule 4 (todo!, unimplemented!)
result_unit_err = "deny"
let_underscore_drop = "deny" # Stricter interpretation of Rule 3
must_use_candidate = "warn"
must_use_unit = "warn"
# Rule 4: Control-flow soundness
match_wildcard_for_single_variants = "deny"
never_loop = "deny"
unreachable = "deny" # Also related to Rule 4
# Rule 5: Memory & concurrency safety
static_mut_refs = "deny" # Corrected lint name
arc_get_mut_unchecked = "deny" # Corrected lint name
# Rule 8: Static analysis gates (CI)
pedantic = "deny" # Stricter to align with CI -D warnings
# Rule 9: Documentation
debug_assert_with_mut_call = "warn"

# Configuration for Kani verification
[package.metadata.kani]
default-unwind = 2