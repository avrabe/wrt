[package]
name = "wrt-foundation"
version.workspace = true
edition.workspace = true
description = "Foundation library providing core types and memory safety primitives for the WebAssembly Runtime (WRT)."
readme = "README.md"
license.workspace = true
repository.workspace = true
keywords = ["wasm", "webassembly", "foundation", "no_std", "safety"]
categories = ["wasm", "no-std", "embedded"]

[features]
# Default features for standard environments
# Binary choice: std OR no_std (no alloc middle ground)
default = [] # Now strictly no_std, no alloc by default; component model features opt-in

# Binary choice: std OR no_std (no alloc middle ground)
std = ["wrt-sync/std"]
no_std = []

# Optional external dependencies - not enabled by default
use-hashbrown = ["dep:hashbrown", "std"] # Requires std

# Optional feature to bypass some safety checks in performance-critical paths
optimize = []
# Additional safety features for ASIL-B compliance
safety = []
# Enable default memory provider functionality
default-provider = ["std"]
# Feature for formal verification, requires nightly for full functionality
# Budget enforcement - compile-time checking for memory budget bypasses
budget-enforcement = []
# WRT compile-time allocator system
wrt-allocator = ["std"]
kani = ["dep:kani-verifier"]

# Feature for platform-backed linear memory
platform-memory = ["dep:wrt-platform"]

# Safe memory implementations
safe-memory = []

# Component Model features
component-model-core = []  # Basic component model support
component-model-values = []  # ü™ô Experimental values
component-model-resources = []  # Resource types
component-model-fixed-lists = []  # üîß Fixed-length lists
component-model-namespaces = []  #  Nested namespaces
component-model-async = []  # üöù Async value types and operations
component-model-error-context = []  # üìù Error context types and operations
component-model-threading = []  # üßµ Threading operations

# Pluggable async executor support
async-api = []  # Enable async/await API with pluggable executor

# Disable panic handler for library builds to avoid conflicts
disable-panic-handler = []

[dependencies]
wrt-error = { workspace = true, default-features = false }
wrt-sync = { workspace = true, default-features = false } # Make alloc conditional via features
wrt-platform = { workspace = true, optional = true, features = ["disable-panic-handler"] }

# Only include hashbrown when explicitly requested with alloc feature
hashbrown = { version = "0.15", optional = true } # For no_std with alloc

# Optional dependencies
# Logging facade - not enabled by default
log = { version = "0.4", optional = true, default-features = false }

# For formal verification - not enabled by default
kani-verifier = { version = "0.62.0", optional = true }

# serde = { version = "1.0", features = ["derive"], optional = true }
# serde_bytes = { version = "0.11", optional = true }

[dev-dependencies]
proptest = { version = "1.4.0", default-features = false, features = ["std"] }
proptest-derive = "0.5.1"
criterion = { version = "0.6", features = ["html_reports"] }

[package.metadata.kani]
default-unwind = 2

# Ensure panic=abort for safety profiles
[lints.rust]
unsafe_code = "deny"
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)', 'cfg(kani)', 'cfg(coverage)', 'cfg(doc)'] }
missing_docs = "allow"
static_mut_refs = "deny"
let_underscore_drop = "warn"

[lints.clippy]
inline_asm_x86_att_syntax = "deny"
transmute_ptr_to_ref = "deny"
float_arithmetic = "deny"
ptr_offset_with_cast = "deny"
unwrap_used = "deny"
expect_used = "deny"
panic = "deny"
todo = "deny"
unimplemented = "deny"
result_unit_err = "deny"
must_use_candidate = "warn"
must_use_unit = "warn"
match_wildcard_for_single_variants = "deny"
never_loop = "deny"
unreachable = "deny"
pedantic = "deny"
debug_assert_with_mut_call = "warn"

[[bench]]
name = "safe_memory_benchmarks"
harness = false