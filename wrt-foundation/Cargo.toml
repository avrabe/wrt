[package]
name = "wrt-foundation"
version.workspace = true
edition.workspace = true
description = "Foundation library providing core types and memory safety primitives for the WebAssembly Runtime (WRT)."
readme = "README.md"
license.workspace = true
repository.workspace = true
keywords = ["wasm", "webassembly", "foundation", "no_std", "safety"]
categories = ["wasm", "no-std", "embedded"]

[features]
default = []

# Core allocation strategies (mutually exclusive)
dynamic-allocation = []
static-allocation = ["no-runtime-allocation"]
verified-static-allocation = ["static-allocation", "formal-verification-required", "compile-time-memory-layout"]

# Capability features (composable)
compile-time-capacity-limits = []
runtime-bounds-checking = []
no-runtime-allocation = ["compile-time-capacity-limits"]
compile-time-memory-layout = ["no-runtime-allocation"]
memory-budget-enforcement = ["compile-time-capacity-limits"]

# Verification features
basic-monitoring = []
formal-verification-required = ["dep:kani-verifier"]
redundant-safety-checks = ["runtime-bounds-checking"]
mathematical-proofs = ["formal-verification-required"]

# Isolation features
memory-isolation = ["memory-budget-enforcement"]
component-isolation = ["memory-isolation"]
hardware-isolation = ["component-isolation"]

# Convenience bundles (equivalent to standard levels)
bounded-collections = [
    "compile-time-capacity-limits",
    "runtime-bounds-checking",
    "basic-monitoring"
]

static-memory-safety = [
    "static-allocation",
    "memory-budget-enforcement",
    "component-isolation"
]

maximum-safety = [
    "verified-static-allocation",
    "mathematical-proofs",
    "redundant-safety-checks",
    "hardware-isolation",
    "compile-time-memory-layout"
]

# ASIL Safety Levels (mutually exclusive)
qm = ["dynamic-allocation"]
asil-a = ["runtime-bounds-checking", "basic-monitoring"]
asil-b = ["runtime-bounds-checking", "basic-monitoring", "bounded-collections"]
asil-c = ["static-allocation", "runtime-bounds-checking", "basic-monitoring", "memory-budget-enforcement", "component-isolation"]
asil-d = ["verified-static-allocation", "mathematical-proofs", "redundant-safety-checks", "hardware-isolation"]

# Legacy compatibility features
std = ["wrt-sync/std", "dynamic-allocation"]
no_std = []
alloc = ["no_std", "dynamic-allocation"]
safety-asil-b = ["asil-b"]
safety-asil-c = ["asil-c"]
safety-asil-d = ["asil-d"]
safe-memory = ["bounded-collections"]
budget-enforcement = ["memory-budget-enforcement"]
wrt-allocator = ["std"]
optimize = []
kani = ["dep:kani-verifier"]

# Additional legacy features
default-provider = ["std"]
use-hashbrown = ["dep:hashbrown", "std"]
platform-memory = ["dep:wrt-platform"]
safety = ["bounded-collections"]

# Component Model features
component-model-core = []
component-model-values = []
component-model-resources = []
component-model-fixed-lists = []
component-model-namespaces = []
component-model-async = []
component-model-error-context = []
component-model-threading = []

# Pluggable async executor support
async-api = []

# Disable panic handler for library builds to avoid conflicts
disable-panic-handler = []

[dependencies]
wrt-error = { workspace = true, default-features = false }
wrt-sync = { workspace = true, default-features = false } # Make alloc conditional via features
wrt-platform = { workspace = true, optional = true }

# Only include hashbrown when explicitly requested with alloc feature
hashbrown = { version = "0.15", optional = true } # For no_std with alloc

# Optional dependencies
# Logging facade - not enabled by default
log = { version = "0.4", optional = true, default-features = false }

# For formal verification - not enabled by default
kani-verifier = { version = "0.62.0", optional = true }

# serde = { version = "1.0", features = ["derive"], optional = true }
# serde_bytes = { version = "0.11", optional = true }

[dev-dependencies]
proptest = { version = "1.4.0", default-features = false, features = ["std"] }
proptest-derive = "0.5.1"
criterion = { version = "0.6", features = ["html_reports"] }

[package.metadata.kani]
default-unwind = 2

# Ensure panic=abort for safety profiles
[lints.rust]
unsafe_code = "deny"
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)', 'cfg(kani)', 'cfg(coverage)', 'cfg(doc)'] }
missing_docs = "allow"
static_mut_refs = "deny"
let_underscore_drop = "warn"

[lints.clippy]
inline_asm_x86_att_syntax = "deny"
transmute_ptr_to_ref = "deny"
float_arithmetic = "deny"
ptr_offset_with_cast = "deny"
unwrap_used = "deny"
expect_used = "deny"
panic = "deny"
todo = "deny"
unimplemented = "deny"
result_unit_err = "deny"
must_use_candidate = "warn"
must_use_unit = "warn"
match_wildcard_for_single_variants = "deny"
never_loop = "deny"
unreachable = "deny"
pedantic = "deny"
debug_assert_with_mut_call = "warn"

[[bench]]
name = "safe_memory_benchmarks"
harness = false